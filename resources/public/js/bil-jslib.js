// Generated by js_of_ocaml 3.6.0
(function(joo_global_object)
   {"use strict";
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return caml_utf16_of_utf8(this.c)
        }};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = "_bigarray";
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_js_from_array(a){return a.slice(1)}
    function caml_ba_create(kind,layout,dims_ml)
     {var
       dims=caml_js_from_array(dims_ml),
       data=caml_ba_create_buffer(kind,caml_ba_get_size(dims));
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_dim(ba,i)
     {if(i < 0 || i >= ba.dims.length)caml_invalid_argument("Bigarray.dim");
      return ba.dims[i]}
    function caml_ba_dim_1(ba){return caml_ba_dim(ba,0)}
    function caml_ba_get_1(ba,i0){return ba.get(ba.offset(i0))}
    function caml_convert_bytes_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_bytes_of_string(s){return s}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function caml_ml_bytes_length(s){return s.l}
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_bigstring_blit_string_to_ba(str1,pos1,ba2,pos2,len)
     {if(12 != ba2.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs2=ba2.offset(pos2);
      if(pos1 + len > caml_ml_string_length(str1))caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=caml_array_of_string(str1).slice(pos1,pos1 + len);
      ba2.data.set(slice,ofs2);
      return 0}
    var caml_blit_string_to_bigstring=caml_bigstring_blit_string_to_ba;
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:caml_ba_deserialize,
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_jsstring_of_string(s){return s.toString()}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = caml_jsbytes_of_string(name);
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))
       this.content[name] = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       this.content[name] = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         this.content[name] = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           this.content[name] = new MlFakeFile(bytes)}
         else
          caml_raise_sys_error
           (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var
       a=new (joo_global_object.Uint8Array)(1),
       buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try
       {return this.fs.existsSync(this.nm(name))?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.readdir
    =
    function(name)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.rename
    =
    function(o,n)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === null)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_eval_string(s){return eval(caml_jsstring_of_string(s))}
    function caml_js_export_var()
     {return typeof module !== "undefined" && module && module.exports
              ?module.exports
              :joo_global_object}
    function caml_js_object(a)
     {var o={};
      for(var i=1;i < a.length;i++)
       {var p=a[i];o[caml_jsstring_of_string(p[1])] = p[2]}
      return o}
    function caml_js_to_array(a)
     {var len=a.length,b=new Array(len + 1);
      b[0] = 0;
      for(var i=0;i < len;i++)b[i + 1] = a[i];
      return b}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {var len=arguments.length,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_string_of_bytes(s){return s}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_backend_type()
     {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=caml_jsstring_of_string(name);
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_string_of_jsstring(g.process.env[n]);
      if
       (joo_global_object.jsoo_static_env
        &&
        joo_global_object.jsoo_static_env[n])
       return caml_string_of_jsstring(joo_global_object.jsoo_static_env[n]);
      caml_raise_not_found()}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_string_of_jsbytes("Out_of_memory"),-1],
     Sys_error=[248,caml_string_of_jsbytes("Sys_error"),-2],
     Failure=[248,caml_string_of_jsbytes("Failure"),-3],
     Invalid_argument=[248,caml_string_of_jsbytes("Invalid_argument"),-4],
     End_of_file=[248,caml_string_of_jsbytes("End_of_file"),-5],
     Division_by_zero=[248,caml_string_of_jsbytes("Division_by_zero"),-6],
     Not_found=[248,caml_string_of_jsbytes("Not_found"),-7],
     Match_failure=[248,caml_string_of_jsbytes("Match_failure"),-8],
     Stack_overflow=[248,caml_string_of_jsbytes("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_string_of_jsbytes("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
     param=
      [0,
       [11,caml_string_of_jsbytes("invalid box description "),[3,0,0]],
       caml_string_of_jsbytes("invalid box description %S")],
     opt=[0,103],
     bkind_expr_REDelegationUpdate=caml_string_of_jsbytes("delegation_update"),
     bkind_expr_REContractOriginati=
      caml_string_of_jsbytes("contract_origination"),
     bkind_expr_RESpending=caml_string_of_jsbytes("spending"),
     bkind_expr_REReceiving=caml_string_of_jsbytes("receiving"),
     bkind_expr_RRAvatarUpdate=caml_string_of_jsbytes("avatar_update"),
     bkind_expr_RRAvatarOrigination=
      caml_string_of_jsbytes("avatar_origination"),
     bkind_expr_RRContractAffected=caml_string_of_jsbytes("contract_affected"),
     bkind_expr_RRContractOriginati=
      caml_string_of_jsbytes("contract_origination"),
     sprthash=caml_string_of_jsbytes("MOCK_sprthash_frozen001"),
     broker=caml_string_of_jsbytes("MOCK_brokerhash_broker0"),
     chainid=caml_string_of_jsbytes("NetXjD3HPJJjmcd"),
     tmplhash=caml_string_of_jsbytes("MOCK_tmplhash_proto0_frozen"),
     genesisop=caml_string_of_jsbytes("MOCK_ophash_frozen001_genesis"),
     genesis_requester=caml_string_of_jsbytes("MOCK_addr_frozen001_requester"),
     genparam=
      caml_string_of_jsbytes("MK//103.2;alice,bob;2020-10-02T05:00:00Z"),
     genesis_timestamp=caml_string_of_jsbytes("2020-06-14T05:00:00Z"),
     major=caml_string_of_jsbytes("major"),
     public_methods=
      [0,
       caml_string_of_jsbytes("chainopInfo"),
       caml_string_of_jsbytes("apimode"),
       caml_string_of_jsbytes("rootinvInfo"),
       caml_string_of_jsbytes("__mock_selected_js"),
       caml_string_of_jsbytes("rootinvResults"),
       caml_string_of_jsbytes("rootinvs"),
       caml_string_of_jsbytes("genesisInfo"),
       caml_string_of_jsbytes("avatarAddress"),
       caml_string_of_jsbytes("__mock_select_js"),
       caml_string_of_jsbytes("__mock_flatdata_js"),
       caml_string_of_jsbytes("inflevel"),
       caml_string_of_jsbytes("avatars"),
       caml_string_of_jsbytes("spiritInfo"),
       caml_string_of_jsbytes("rootinvEffects"),
       caml_string_of_jsbytes("avatarInfo"),
       caml_string_of_jsbytes("__bil_token_js")],
     names=
      [0,
       caml_string_of_jsbytes("spiritInfo"),
       caml_string_of_jsbytes("rootinvs"),
       caml_string_of_jsbytes("rootinvResults"),
       caml_string_of_jsbytes("rootinvInfo"),
       caml_string_of_jsbytes("rootinvEffects"),
       caml_string_of_jsbytes("inflevel"),
       caml_string_of_jsbytes("genesisInfo"),
       caml_string_of_jsbytes("chainopInfo"),
       caml_string_of_jsbytes("avatars"),
       caml_string_of_jsbytes("avatarInfo"),
       caml_string_of_jsbytes("avatarAddress"),
       caml_string_of_jsbytes("apimode"),
       caml_string_of_jsbytes("__mock_selected_js"),
       caml_string_of_jsbytes("__mock_select_js"),
       caml_string_of_jsbytes("__mock_flatdata_js"),
       caml_string_of_jsbytes("__bil_token_js")],
     entrypoint=caml_string_of_jsbytes("TSCABookappInterface");
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _c_=caml_string_of_jsbytes("output_substring"),
     _a_=caml_string_of_jsbytes("true"),
     _b_=caml_string_of_jsbytes("false"),
     _d_=caml_string_of_jsbytes("option is None"),
     _e_=caml_string_of_jsbytes("\\\\"),
     _f_=caml_string_of_jsbytes("\\'"),
     _g_=caml_string_of_jsbytes("\\b"),
     _h_=caml_string_of_jsbytes("\\t"),
     _i_=caml_string_of_jsbytes("\\n"),
     _j_=caml_string_of_jsbytes("\\r"),
     _k_=caml_string_of_jsbytes("hd"),
     _n_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     _m_=caml_string_of_jsbytes("Bytes.blit"),
     _l_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     _o_=caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     _q_=caml_string_of_jsbytes("Array.blit"),
     _p_=caml_string_of_jsbytes("Array.init"),
     _v_=caml_string_of_jsbytes("Map.remove_min_elt"),
     _w_=[0,0,0,0],
     _x_=[0,caml_string_of_jsbytes("map.ml"),398,10],
     _y_=[0,0,0],
     _r_=caml_string_of_jsbytes("Map.bal"),
     _s_=caml_string_of_jsbytes("Map.bal"),
     _t_=caml_string_of_jsbytes("Map.bal"),
     _u_=caml_string_of_jsbytes("Map.bal"),
     _A_=caml_string_of_jsbytes("Stdlib.Queue.Empty"),
     _F_=caml_string_of_jsbytes("Buffer.add_substring/add_subbytes"),
     _E_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     _D_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _C_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _B_=caml_string_of_jsbytes("Buffer.sub"),
     _O_=caml_string_of_jsbytes("%c"),
     _P_=caml_string_of_jsbytes("%s"),
     _Q_=caml_string_of_jsbytes("%i"),
     _R_=caml_string_of_jsbytes("%li"),
     _S_=caml_string_of_jsbytes("%ni"),
     _T_=caml_string_of_jsbytes("%Li"),
     _U_=caml_string_of_jsbytes("%f"),
     _V_=caml_string_of_jsbytes("%B"),
     _W_=caml_string_of_jsbytes("%{"),
     _X_=caml_string_of_jsbytes("%}"),
     _Y_=caml_string_of_jsbytes("%("),
     _Z_=caml_string_of_jsbytes("%)"),
     ___=caml_string_of_jsbytes("%a"),
     _$_=caml_string_of_jsbytes("%t"),
     _aa_=caml_string_of_jsbytes("%?"),
     _ab_=caml_string_of_jsbytes("%r"),
     _ac_=caml_string_of_jsbytes("%_r"),
     _ad_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _ao_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _ag_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _ap_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _ah_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _aq_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _ai_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _ar_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _aj_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _as_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _ak_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _am_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _ae_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _an_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _af_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _al_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _bo_=caml_string_of_jsbytes("%u"),
     _bm_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _bn_=caml_string_of_jsbytes("Printf: bad conversion %["),
     _bp_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _bq_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _br_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _bs_=caml_string_of_jsbytes("Printf: bad conversion %_"),
     _bt_=caml_string_of_jsbytes("@{"),
     _bu_=caml_string_of_jsbytes("@["),
     _bv_=caml_string_of_jsbytes(""),
     _bw_=[0,0,4],
     _bx_=caml_string_of_jsbytes(""),
     _by_=caml_string_of_jsbytes("b"),
     _bz_=caml_string_of_jsbytes("h"),
     _bA_=caml_string_of_jsbytes("hov"),
     _bB_=caml_string_of_jsbytes("hv"),
     _bC_=caml_string_of_jsbytes("v"),
     _bl_=caml_string_of_jsbytes("nan"),
     _bj_=caml_string_of_jsbytes("neg_infinity"),
     _bk_=caml_string_of_jsbytes("infinity"),
     _bi_=caml_string_of_jsbytes("."),
     _a8_=caml_string_of_jsbytes("%+nd"),
     _a9_=caml_string_of_jsbytes("% nd"),
     _a$_=caml_string_of_jsbytes("%+ni"),
     _ba_=caml_string_of_jsbytes("% ni"),
     _bb_=caml_string_of_jsbytes("%nx"),
     _bc_=caml_string_of_jsbytes("%#nx"),
     _bd_=caml_string_of_jsbytes("%nX"),
     _be_=caml_string_of_jsbytes("%#nX"),
     _bf_=caml_string_of_jsbytes("%no"),
     _bg_=caml_string_of_jsbytes("%#no"),
     _a7_=caml_string_of_jsbytes("%nd"),
     _a__=caml_string_of_jsbytes("%ni"),
     _bh_=caml_string_of_jsbytes("%nu"),
     _aV_=caml_string_of_jsbytes("%+ld"),
     _aW_=caml_string_of_jsbytes("% ld"),
     _aY_=caml_string_of_jsbytes("%+li"),
     _aZ_=caml_string_of_jsbytes("% li"),
     _a0_=caml_string_of_jsbytes("%lx"),
     _a1_=caml_string_of_jsbytes("%#lx"),
     _a2_=caml_string_of_jsbytes("%lX"),
     _a3_=caml_string_of_jsbytes("%#lX"),
     _a4_=caml_string_of_jsbytes("%lo"),
     _a5_=caml_string_of_jsbytes("%#lo"),
     _aU_=caml_string_of_jsbytes("%ld"),
     _aX_=caml_string_of_jsbytes("%li"),
     _a6_=caml_string_of_jsbytes("%lu"),
     _aI_=caml_string_of_jsbytes("%+Ld"),
     _aJ_=caml_string_of_jsbytes("% Ld"),
     _aL_=caml_string_of_jsbytes("%+Li"),
     _aM_=caml_string_of_jsbytes("% Li"),
     _aN_=caml_string_of_jsbytes("%Lx"),
     _aO_=caml_string_of_jsbytes("%#Lx"),
     _aP_=caml_string_of_jsbytes("%LX"),
     _aQ_=caml_string_of_jsbytes("%#LX"),
     _aR_=caml_string_of_jsbytes("%Lo"),
     _aS_=caml_string_of_jsbytes("%#Lo"),
     _aH_=caml_string_of_jsbytes("%Ld"),
     _aK_=caml_string_of_jsbytes("%Li"),
     _aT_=caml_string_of_jsbytes("%Lu"),
     _av_=caml_string_of_jsbytes("%+d"),
     _aw_=caml_string_of_jsbytes("% d"),
     _ay_=caml_string_of_jsbytes("%+i"),
     _az_=caml_string_of_jsbytes("% i"),
     _aA_=caml_string_of_jsbytes("%x"),
     _aB_=caml_string_of_jsbytes("%#x"),
     _aC_=caml_string_of_jsbytes("%X"),
     _aD_=caml_string_of_jsbytes("%#X"),
     _aE_=caml_string_of_jsbytes("%o"),
     _aF_=caml_string_of_jsbytes("%#o"),
     _au_=caml_string_of_jsbytes("%d"),
     _ax_=caml_string_of_jsbytes("%i"),
     _aG_=caml_string_of_jsbytes("%u"),
     _G_=caml_string_of_jsbytes("@]"),
     _H_=caml_string_of_jsbytes("@}"),
     _I_=caml_string_of_jsbytes("@?"),
     _J_=caml_string_of_jsbytes("@\n"),
     _K_=caml_string_of_jsbytes("@."),
     _L_=caml_string_of_jsbytes("@@"),
     _M_=caml_string_of_jsbytes("@%"),
     _N_=caml_string_of_jsbytes("@"),
     _at_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     _gj_=caml_string_of_jsbytes("OCAMLRUNPARAM"),
     _gh_=caml_string_of_jsbytes("CAMLRUNPARAM"),
     _bD_=caml_string_of_jsbytes(""),
     _bY_=[3,0,3],
     _bZ_=caml_string_of_jsbytes("."),
     _bV_=caml_string_of_jsbytes(">"),
     _bW_=caml_string_of_jsbytes("<\/"),
     _bX_=caml_string_of_jsbytes(""),
     _bS_=caml_string_of_jsbytes(">"),
     _bT_=caml_string_of_jsbytes("<"),
     _bU_=caml_string_of_jsbytes(""),
     _bR_=caml_string_of_jsbytes("\n"),
     _bN_=caml_string_of_jsbytes(""),
     _bO_=caml_string_of_jsbytes(""),
     _bP_=caml_string_of_jsbytes(""),
     _bQ_=caml_string_of_jsbytes(""),
     _bM_=[0,caml_string_of_jsbytes("")],
     _bI_=caml_string_of_jsbytes(""),
     _bJ_=caml_string_of_jsbytes(""),
     _bK_=caml_string_of_jsbytes(""),
     _bL_=caml_string_of_jsbytes(""),
     _bH_=[0,caml_string_of_jsbytes(""),0,caml_string_of_jsbytes("")],
     _bG_=caml_string_of_jsbytes(""),
     _bF_=caml_string_of_jsbytes("Stdlib.Format.String_tag"),
     _b0_=caml_string_of_jsbytes(""),
     _b1_=caml_string_of_jsbytes("Js_of_ocaml__Js.Error"),
     _b2_=caml_string_of_jsbytes("jsError"),
     _b3_=caml_string_of_jsbytes("Length of alphabet must be 64"),
     _b4_=caml_string_of_jsbytes("Alphabet can not contain padding character"),
     _b5_=
      caml_string_of_jsbytes
       ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),
     _b6_=
      caml_string_of_jsbytes
       ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),
     _cc_=
      [0,
       [17,[0,caml_string_of_jsbytes("@;"),1,0],0],
       caml_string_of_jsbytes("@;")],
     _cb_=[0,[12,32,0],caml_string_of_jsbytes(" ")],
     _ca_=[0,[11,caml_string_of_jsbytes("  "),0],caml_string_of_jsbytes("  ")],
     _cd_=[0,[15,[4,6,0,[0,2],[15,0]]],caml_string_of_jsbytes("%a%.2x%a")],
     _b$_=
      [0,
       [11,
        caml_string_of_jsbytes("Cstruct.blit_from_string src="),
        [15,
         [11,
          caml_string_of_jsbytes(" dst="),
          [15,
           [11,
            caml_string_of_jsbytes(" dst-off="),
            [4,0,0,0,[11,caml_string_of_jsbytes(" len="),[4,0,0,0,0]]]]]]]],
       caml_string_of_jsbytes
        ("Cstruct.blit_from_string src=%a dst=%a dst-off=%d len=%d")],
     _b__=
      [0,
       [11,
        caml_string_of_jsbytes("Cstruct.blit_from_string src="),
        [15,
         [11,
          caml_string_of_jsbytes(" dst="),
          [15,
           [11,
            caml_string_of_jsbytes(" src-off="),
            [4,0,0,0,[11,caml_string_of_jsbytes(" len="),[4,0,0,0,0]]]]]]]],
       caml_string_of_jsbytes
        ("Cstruct.blit_from_string src=%a dst=%a src-off=%d len=%d")],
     _b9_=
      [0,
       [11,
        caml_string_of_jsbytes("Cstruct.set_len "),
        [15,[12,32,[4,0,0,0,0]]]],
       caml_string_of_jsbytes("Cstruct.set_len %a %d")],
     _b8_=[0,[12,91,[4,0,0,0,[12,93,0]]],caml_string_of_jsbytes("[%d]")],
     _b7_=
      [0,
       [12,
        91,
        [4,
         0,
         0,
         0,
         [12,
          44,
          [4,0,0,0,[11,caml_string_of_jsbytes("]("),[4,0,0,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes("[%d,%d](%d)")],
     _ce_=[0,[17,3,[15,[17,4,0]]],caml_string_of_jsbytes("@\n%a@.")],
     _cf_=caml_string_of_jsbytes(""),
     _cg_=caml_string_of_jsbytes("Jscodec.Records.Field_codec_mismatch"),
     _fE_=caml_string_of_jsbytes("timestamp"),
     _fF_=caml_string_of_jsbytes("fees"),
     _fG_=caml_string_of_jsbytes("source"),
     _fH_=caml_string_of_jsbytes("ophash"),
     _fA_=caml_string_of_jsbytes("ophash"),
     _fB_=caml_string_of_jsbytes("source"),
     _fC_=caml_string_of_jsbytes("fees"),
     _fD_=caml_string_of_jsbytes("timestamp"),
     _fs_=caml_string_of_jsbytes("results"),
     _ft_=caml_string_of_jsbytes("effects"),
     _fu_=caml_string_of_jsbytes("metadata"),
     _fv_=caml_string_of_jsbytes("rivhash"),
     _fo_=caml_string_of_jsbytes("rivhash"),
     _fp_=caml_string_of_jsbytes("metadata"),
     _fq_=caml_string_of_jsbytes("effects"),
     _fr_=caml_string_of_jsbytes("results"),
     _fj_=[0,caml_string_of_jsbytes("bil/types.ml"),195,2],
     _ff_=caml_string_of_jsbytes("storage"),
     _fg_=caml_string_of_jsbytes("balance"),
     _fh_=caml_string_of_jsbytes("subject"),
     _fi_=caml_string_of_jsbytes("kind"),
     _fb_=caml_string_of_jsbytes("kind"),
     _fc_=caml_string_of_jsbytes("subject"),
     _fd_=caml_string_of_jsbytes("balance"),
     _fe_=caml_string_of_jsbytes("storage"),
     _e6_=caml_string_of_jsbytes("balance"),
     _e7_=caml_string_of_jsbytes("subject"),
     _e8_=caml_string_of_jsbytes("kind"),
     _e3_=caml_string_of_jsbytes("kind"),
     _e4_=caml_string_of_jsbytes("subject"),
     _e5_=caml_string_of_jsbytes("balance"),
     _eV_=caml_string_of_jsbytes("storage"),
     _eW_=caml_string_of_jsbytes("balance"),
     _eX_=caml_string_of_jsbytes("rclabel"),
     _eY_=caml_string_of_jsbytes("subject"),
     _eZ_=caml_string_of_jsbytes("kind"),
     _eQ_=caml_string_of_jsbytes("kind"),
     _eR_=caml_string_of_jsbytes("subject"),
     _eS_=caml_string_of_jsbytes("rclabel"),
     _eT_=caml_string_of_jsbytes("balance"),
     _eU_=caml_string_of_jsbytes("storage"),
     _eG_=caml_string_of_jsbytes("storage"),
     _eH_=caml_string_of_jsbytes("balance"),
     _eI_=caml_string_of_jsbytes("rclabel"),
     _eJ_=caml_string_of_jsbytes("subject"),
     _eK_=caml_string_of_jsbytes("kind"),
     _eB_=caml_string_of_jsbytes("kind"),
     _eC_=caml_string_of_jsbytes("subject"),
     _eD_=caml_string_of_jsbytes("rclabel"),
     _eE_=caml_string_of_jsbytes("balance"),
     _eF_=caml_string_of_jsbytes("storage"),
     _ev_=[0,caml_string_of_jsbytes("bil/types.ml"),168,2],
     _es_=caml_string_of_jsbytes("amount"),
     _et_=caml_string_of_jsbytes("sender"),
     _eu_=caml_string_of_jsbytes("kind"),
     _ep_=caml_string_of_jsbytes("kind"),
     _eq_=caml_string_of_jsbytes("sender"),
     _er_=caml_string_of_jsbytes("amount"),
     _eh_=caml_string_of_jsbytes("argument"),
     _ei_=caml_string_of_jsbytes("amount"),
     _ej_=caml_string_of_jsbytes("receiver"),
     _ek_=caml_string_of_jsbytes("sender"),
     _el_=caml_string_of_jsbytes("kind"),
     _ec_=caml_string_of_jsbytes("kind"),
     _ed_=caml_string_of_jsbytes("sender"),
     _ee_=caml_string_of_jsbytes("receiver"),
     _ef_=caml_string_of_jsbytes("amount"),
     _eg_=caml_string_of_jsbytes("argument"),
     _d3_=caml_string_of_jsbytes("program"),
     _d4_=caml_string_of_jsbytes("initstorage"),
     _d5_=caml_string_of_jsbytes("initbal"),
     _d6_=caml_string_of_jsbytes("address"),
     _d7_=caml_string_of_jsbytes("rclabel"),
     _d8_=caml_string_of_jsbytes("kind"),
     _dX_=caml_string_of_jsbytes("kind"),
     _dY_=caml_string_of_jsbytes("rclabel"),
     _dZ_=caml_string_of_jsbytes("address"),
     _d0_=caml_string_of_jsbytes("initbal"),
     _d1_=caml_string_of_jsbytes("initstorage"),
     _d2_=caml_string_of_jsbytes("program"),
     _dN_=caml_string_of_jsbytes("newdel"),
     _dO_=caml_string_of_jsbytes("olddel"),
     _dP_=caml_string_of_jsbytes("subject"),
     _dQ_=caml_string_of_jsbytes("kind"),
     _dJ_=caml_string_of_jsbytes("kind"),
     _dK_=caml_string_of_jsbytes("subject"),
     _dL_=caml_string_of_jsbytes("olddel"),
     _dM_=caml_string_of_jsbytes("newdel"),
     _dy_=caml_string_of_jsbytes("optxnid"),
     _dz_=caml_string_of_jsbytes("chainop"),
     _dA_=caml_string_of_jsbytes("timestamp"),
     _dB_=caml_string_of_jsbytes("argument"),
     _dC_=caml_string_of_jsbytes("amount"),
     _dD_=caml_string_of_jsbytes("sender"),
     _dE_=caml_string_of_jsbytes("source"),
     _dr_=caml_string_of_jsbytes("source"),
     _ds_=caml_string_of_jsbytes("sender"),
     _dt_=caml_string_of_jsbytes("amount"),
     _du_=caml_string_of_jsbytes("argument"),
     _dv_=caml_string_of_jsbytes("timestamp"),
     _dw_=caml_string_of_jsbytes("chainop"),
     _dx_=caml_string_of_jsbytes("optxnid"),
     _df_=caml_string_of_jsbytes("delegation"),
     _dg_=caml_string_of_jsbytes("storage"),
     _dh_=caml_string_of_jsbytes("balance"),
     _di_=caml_string_of_jsbytes("address"),
     _dj_=caml_string_of_jsbytes("rclabel"),
     _da_=caml_string_of_jsbytes("rclabel"),
     _db_=caml_string_of_jsbytes("address"),
     _dc_=caml_string_of_jsbytes("balance"),
     _dd_=caml_string_of_jsbytes("storage"),
     _de_=caml_string_of_jsbytes("delegation"),
     _c0_=caml_string_of_jsbytes("timestamp"),
     _c1_=caml_string_of_jsbytes("template_fees"),
     _c2_=caml_string_of_jsbytes("amount"),
     _c3_=caml_string_of_jsbytes("genparam"),
     _c4_=caml_string_of_jsbytes("requester"),
     _c5_=caml_string_of_jsbytes("broker"),
     _c6_=caml_string_of_jsbytes("genesisop"),
     _cT_=caml_string_of_jsbytes("genesisop"),
     _cU_=caml_string_of_jsbytes("broker"),
     _cV_=caml_string_of_jsbytes("requester"),
     _cW_=caml_string_of_jsbytes("genparam"),
     _cX_=caml_string_of_jsbytes("amount"),
     _cY_=caml_string_of_jsbytes("template_fees"),
     _cZ_=caml_string_of_jsbytes("timestamp"),
     _cI_=caml_string_of_jsbytes("tmplhash"),
     _cJ_=caml_string_of_jsbytes("broker"),
     _cK_=caml_string_of_jsbytes("chainid"),
     _cL_=caml_string_of_jsbytes("sprthash"),
     _cE_=caml_string_of_jsbytes("sprthash"),
     _cF_=caml_string_of_jsbytes("chainid"),
     _cG_=caml_string_of_jsbytes("broker"),
     _cH_=caml_string_of_jsbytes("tmplhash"),
     _cy_=caml_string_of_jsbytes("provider_fee"),
     _cz_=caml_string_of_jsbytes("agency_fee"),
     _cw_=caml_string_of_jsbytes("agency_fee"),
     _cx_=caml_string_of_jsbytes("provider_fee"),
     _cs_=caml_string_of_jsbytes("chain_burn"),
     _ct_=caml_string_of_jsbytes("chain_fee"),
     _cq_=caml_string_of_jsbytes("chain_fee"),
     _cr_=caml_string_of_jsbytes("chain_burn"),
     _cn_=caml_string_of_jsbytes("codec_diff"),
     _co_=caml_string_of_jsbytes("chain_burn"),
     _cp_=caml_string_of_jsbytes("chain_fee"),
     _cu_=caml_string_of_jsbytes("provider_fee"),
     _cv_=caml_string_of_jsbytes("agency_fee"),
     _cA_=caml_string_of_jsbytes("tmplhash"),
     _cB_=caml_string_of_jsbytes("broker"),
     _cC_=caml_string_of_jsbytes("chainid"),
     _cD_=caml_string_of_jsbytes("sprthash"),
     _cM_=caml_string_of_jsbytes("timestamp"),
     _cN_=caml_string_of_jsbytes("template_fees"),
     _cO_=caml_string_of_jsbytes("amount"),
     _cP_=caml_string_of_jsbytes("genparam"),
     _cQ_=caml_string_of_jsbytes("requester"),
     _cR_=caml_string_of_jsbytes("broker"),
     _cS_=caml_string_of_jsbytes("genesisop"),
     _c7_=caml_string_of_jsbytes("delegation"),
     _c8_=caml_string_of_jsbytes("storage"),
     _c9_=caml_string_of_jsbytes("balance"),
     _c__=caml_string_of_jsbytes("address"),
     _c$_=caml_string_of_jsbytes("rclabel"),
     _dk_=caml_string_of_jsbytes("optxnid"),
     _dl_=caml_string_of_jsbytes("chainop"),
     _dm_=caml_string_of_jsbytes("timestamp"),
     _dn_=caml_string_of_jsbytes("argument"),
     _do_=caml_string_of_jsbytes("amount"),
     _dp_=caml_string_of_jsbytes("sender"),
     _dq_=caml_string_of_jsbytes("source"),
     _dF_=caml_string_of_jsbytes("newdel"),
     _dG_=caml_string_of_jsbytes("olddel"),
     _dH_=caml_string_of_jsbytes("subject"),
     _dI_=caml_string_of_jsbytes("kind"),
     _dR_=caml_string_of_jsbytes("program"),
     _dS_=caml_string_of_jsbytes("initstorage"),
     _dT_=caml_string_of_jsbytes("initbal"),
     _dU_=caml_string_of_jsbytes("address"),
     _dV_=caml_string_of_jsbytes("rclabel"),
     _dW_=caml_string_of_jsbytes("kind"),
     _d9_=caml_string_of_jsbytes("argument"),
     _d__=caml_string_of_jsbytes("amount"),
     _d$_=caml_string_of_jsbytes("receiver"),
     _ea_=caml_string_of_jsbytes("sender"),
     _eb_=caml_string_of_jsbytes("kind"),
     _em_=caml_string_of_jsbytes("amount"),
     _en_=caml_string_of_jsbytes("sender"),
     _eo_=caml_string_of_jsbytes("kind"),
     _ew_=caml_string_of_jsbytes("storage"),
     _ex_=caml_string_of_jsbytes("balance"),
     _ey_=caml_string_of_jsbytes("rclabel"),
     _ez_=caml_string_of_jsbytes("subject"),
     _eA_=caml_string_of_jsbytes("kind"),
     _eL_=caml_string_of_jsbytes("storage"),
     _eM_=caml_string_of_jsbytes("balance"),
     _eN_=caml_string_of_jsbytes("rclabel"),
     _eO_=caml_string_of_jsbytes("subject"),
     _eP_=caml_string_of_jsbytes("kind"),
     _e0_=caml_string_of_jsbytes("balance"),
     _e1_=caml_string_of_jsbytes("subject"),
     _e2_=caml_string_of_jsbytes("kind"),
     _e9_=caml_string_of_jsbytes("storage"),
     _e__=caml_string_of_jsbytes("balance"),
     _e$_=caml_string_of_jsbytes("subject"),
     _fa_=caml_string_of_jsbytes("kind"),
     _fk_=caml_string_of_jsbytes("results"),
     _fl_=caml_string_of_jsbytes("effects"),
     _fm_=caml_string_of_jsbytes("metadata"),
     _fn_=caml_string_of_jsbytes("rivhash"),
     _fw_=caml_string_of_jsbytes("timestamp"),
     _fx_=caml_string_of_jsbytes("fees"),
     _fy_=caml_string_of_jsbytes("source"),
     _fz_=caml_string_of_jsbytes("ophash"),
     _fI_=caml_string_of_jsbytes("chainops"),
     _fJ_=caml_string_of_jsbytes("rootinvs"),
     _fK_=caml_string_of_jsbytes("affected"),
     _fL_=caml_string_of_jsbytes("avatars"),
     _fM_=caml_string_of_jsbytes("genesis"),
     _fN_=caml_string_of_jsbytes("metadata"),
     _fO_=caml_string_of_jsbytes("MK//alice,bob;2020-10-02T05:00:00Z"),
     _fP_=caml_string_of_jsbytes("MOCK_addr_frozen001rc_major"),
     _f0_=caml_string_of_jsbytes(""),
     _fS_=
      caml_string_of_jsbytes
       ("typeof(bil_token_passin)==='undefined'?null:bil_token_passin"),
     _fT_=caml_string_of_jsbytes("notoken"),
     _fU_=caml_string_of_jsbytes("bil/bil_jslib.ml"),
     _fV_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(": bil_token='"),[2,0,[12,39,0]]]],
       caml_string_of_jsbytes("%s: bil_token='%s'")],
     _fQ_=caml_string_of_jsbytes("bil/bil_jslib.ml"),
     _fR_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" loading"),0]],
       caml_string_of_jsbytes("%s loading")],
     _gf_=caml_string_of_jsbytes("bil/bil_jslib.ml"),
     _gg_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" loaded and entrypoint "),
         [2,0,[11,caml_string_of_jsbytes(" exposed"),0]]]],
       caml_string_of_jsbytes("%s loaded and entrypoint %s exposed")];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function abs(x){return 0 <= x?x:- x | 0}
    var max_int=2147483647;
    function symbol(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function string_of_bool(b){return b?_a_:_b_}
    caml_ml_open_descriptor_in(0);
    var
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_lu_)
             {_lu_ = caml_wrap_exception(_lu_);
              if(_lu_[1] !== Sys_error)throw _lu_;
              var _lt_=_lu_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    var exit_function=[0,flush_all];
    function at_exit(f)
     {var g=exit_function[1],f_already_ran=[0,0];
      exit_function[1]
      =
      function(param)
       {if(1 - f_already_ran[1]){f_already_ran[1] = 1;caml_call1(f,0)}
        return caml_call1(g,0)};
      return 0}
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function value(o,default$0){if(o){var v=o[1];return v}return default$0}
    function map(f,o){if(o){var v=o[1];return [0,caml_call1(f,v)]}return 0}
    var
     match=caml_sys_const_backend_type(0),
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    typeof match === "number";
    function map$0(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map$0(f,l)]}
      return 0}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function sub(s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
      return invalid_arg(_l_)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_m_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_n_)}
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function sub$0(s,ofs,len)
     {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec(s,l,i,c);var _lr_=1;return _lr_}
       catch(_ls_)
        {_ls_ = caml_wrap_exception(_ls_);
         if(_ls_ === Not_found)return 0;
         throw _ls_}
      return invalid_arg(_o_)}
    function contains(s,c){return contains_from(s,0,c)}
    function split_on_char(sep,s)
     {var
       r=[0,0],
       j=[0,caml_ml_string_length(s)],
       _ln_=caml_ml_string_length(s) - 1 | 0;
      if(! (_ln_ < 0))
       {var i=_ln_;
        for(;;)
         {if(caml_string_unsafe_get(s,i) === sep)
           {var _lp_=r[1];
            r[1] = [0,sub$0(s,i + 1 | 0,(j[1] - i | 0) - 1 | 0),_lp_];
            j[1] = i}
          var _lq_=i - 1 | 0;
          if(0 !== i){var i=_lq_;continue}
          break}}
      var _lo_=r[1];
      return [0,sub$0(s,0,j[1]),_lo_]}
    function map$1(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_ll_=l - 1 | 0,_lk_=1;
      if(! (_ll_ < 1))
       {var i=_lk_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _lm_=i + 1 | 0;
          if(_ll_ !== i){var i=_lm_;continue}
          break}}
      return r}
    function to_list(a)
     {var i$1=a.length - 1 - 1 | 0,i=i$1,res=0;
      for(;;)
       {if(0 <= i)
         {var res$0=[0,a[1 + i],res],i$0=i - 1 | 0,i=i$0,res=res$0;continue}
        return res}}
    function of_list(l)
     {if(l)
       {var tl=l[2],hd=l[1],accu=0,param=l;
        for(;;)
         {if(param)
           {var
             param$0=param[2],
             accu$0=accu + 1 | 0,
             accu=accu$0,
             param=param$0;
            continue}
          var a=caml_make_vect(accu,hd),i=1,param$1=tl;
          for(;;)
           {if(param$1)
             {var tl$0=param$1[2],hd$0=param$1[1];
              a[1 + i] = hd$0;
              var i$0=i + 1 | 0,i=i$0,param$1=tl$0;
              continue}
            return a}}}
      return [0]}
    caml_fresh_oo_id(0);
    function _z_(Ord)
     {function height(param){if(param){var h=param[5];return h}return 0}
      function create(l,x,d,r)
       {var hl=height(l),hr=height(r),_lj_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_lj_]}
      function singleton(x,d){return [0,0,x,d,0,1]}
      function bal(l,x,d,r)
       {if(l)var h=l[5],hl=h;else var hl=0;
        if(r)var h$0=r[5],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_le_=height(lr);
            if(_le_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
            if(lr)
             {var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
               _lf_=create(lrr,x,d,r);
              return create(create(ll,lv,ld,lrl),lrv,lrd,_lf_)}
            return invalid_arg(_r_)}
          return invalid_arg(_s_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_lg_=height(rl);
            if(_lg_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
            if(rl)
             {var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
               _lh_=create(rlr,rv,rd,rr);
              return create(create(l,x,d,rll),rlv,rld,_lh_)}
            return invalid_arg(_t_)}
          return invalid_arg(_u_)}
        var _li_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_li_]}
      var empty=0;
      function is_empty(param){return param?0:1}
      function add(x,data,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return d === data?m:[0,l,x,data,r,h];
          if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=add(x,data,l);
          return l === ll?m:bal(ll,v,d,r)}
        return [0,0,x,data,0,1]}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return d;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function find_first(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,v0,d0]}}
            var param$1=r$0;
            continue}
          throw Not_found}}
      function find_first_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=r$0;
            continue}
          return 0}}
      function find_last(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,v0,d0]}}
            var param$1=l$0;
            continue}
          throw Not_found}}
      function find_last_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=l$0;
            continue}
          return 0}}
      function find_opt(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return [0,d];
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _ld_=0 === c?1:0;
            if(_ld_)return _ld_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function min_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _lc_=param$0[1];
            if(_lc_){var param$0=_lc_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,v,d]}
          throw Not_found}}
      function min_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _lb_=param$0[1];
            if(_lb_){var param$0=_lb_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,[0,v,d]]}
          return 0}}
      function max_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
            var d=param$0[3],v=param$0[2];
            return [0,v,d]}
          throw Not_found}}
      function max_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
            var d=param$0[3],v=param$0[2];
            return [0,[0,v,d]]}
          return 0}}
      function remove_min_binding(param)
       {if(param)
         {var _la_=param[1];
          if(_la_)
           {var r=param[4],d=param[3],v=param[2];
            return bal(remove_min_binding(_la_),v,d,r)}
          var r$0=param[4];
          return r$0}
        return invalid_arg(_v_)}
      function _kP_(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return bal(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function remove(x,m)
       {if(m)
         {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return _kP_(l,r);
          if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=remove(x,l);
          return l === ll?m:bal(ll,v,d,r)}
        return 0}
      function update(x,f,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)
           {var match=caml_call1(f,[0,d]);
            if(match){var data=match[1];return d === data?m:[0,l,x,data,r,h]}
            return _kP_(l,r)}
          if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=update(x,f,l);
          return l === ll?m:bal(ll,v,d,r)}
        var match$0=caml_call1(f,0);
        if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
        return 0}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call2(f,v,d);
            var param$0=r;
            continue}
          return 0}}
      function map(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=map(f,l),
           d$0=caml_call1(f,d),
           r$0=map(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function mapi(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=mapi(f,l),
           d$0=caml_call2(f,v,d),
           r$0=mapi(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
             m$0=r,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _k9_=caml_call2(p,v,d);
            if(_k9_)
             {var _k__=for_all(p,l);
              if(_k__){var param$0=r;continue}
              var _k$_=_k__}
            else
             var _k$_=_k9_;
            return _k$_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _k6_=caml_call2(p,v,d);
            if(_k6_)
             var _k7_=_k6_;
            else
             {var _k8_=exists(p,l);
              if(! _k8_){var param$0=r;continue}
              var _k7_=_k8_}
            return _k7_}
          return 0}}
      function add_min_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(add_min_binding(k,x,l),v,d,r)}
        return singleton(k,x)}
      function add_max_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(l,v,d,add_max_binding(k,x,r))}
        return singleton(k,x)}
      function join(l,v,d,r)
       {if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,ld,join(lr,v,d,r))
                    :(lh + 2 | 0) < rh
                      ?bal(join(l,v,d,rl),rv,rd,rr)
                      :create(l,v,d,r)}
          return add_max_binding(v,d,l)}
        return add_min_binding(v,d,r)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return join(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function concat_or_join(t1,v,d,t2)
       {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
      function split(x,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,[0,d],r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,d,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,d,r)]}
        return _w_}
      function merge(f,s1,s2)
       {if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
          if(height(s2) <= h1)
           {var
             match=split(v1,s2),
             r2=match[3],
             d2=match[2],
             l2=match[1],
             _k2_=merge(f,r1,r2),
             _k3_=caml_call3(f,v1,[0,d1],d2);
            return concat_or_join(merge(f,l1,l2),v1,_k3_,_k2_)}}
        else
         if(! s2)return 0;
        if(s2)
         {var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           _k4_=merge(f,r1$0,r2$0),
           _k5_=caml_call3(f,v2,d1$0,[0,d2$0]);
          return concat_or_join(merge(f,l1$0,l2$0),v2,_k5_,_k4_)}
        throw [0,Assert_failure,_x_]}
      function union(f,s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {var
               match=split(v1,s2),
               r2$0=match[3],
               d2$0=match[2],
               l2$0=match[1],
               l=union(f,l1,l2$0),
               r=union(f,r1,r2$0);
              if(d2$0)
               {var d2$1=d2$0[1];
                return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
              return join(l,v1,d1,r)}
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             d1$0=match$0[2],
             l1$0=match$0[1],
             l$0=union(f,l1$0,l2),
             r$0=union(f,r1$0,r2);
            if(d1$0)
             {var d1$1=d1$0[1];
              return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
            return join(l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
        return s}
      function filter(p,m)
       {if(m)
         {var
           r=m[4],
           d=m[3],
           v=m[2],
           l=m[1],
           l$0=filter(p,l),
           pvd=caml_call2(p,v,d),
           r$0=filter(p,r);
          if(pvd){if(l === l$0 && r === r$0)return m;return join(l$0,v,d,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pvd=caml_call2(p,v,d),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pvd){var _k0_=concat(lf,rf);return [0,join(lt,v,d,rt),_k0_]}
          var _k1_=join(lf,v,d,rf);
          return [0,concat(lt,rt),_k1_]}
        return _y_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             m$1=m$0[1],
             e$1=[0,v,d,r,e$0],
             m$0=m$1,
             e$0=e$1;
            continue}
          return e$0}}
      function compare(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var c$0=caml_call2(cmp,d1,d2);
                if(0 === c$0)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                return c$0}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               _kX_=0 === caml_call2(Ord[1],v1,v2)?1:0;
              if(_kX_)
               {var _kY_=caml_call2(cmp,d1,d2);
                if(_kY_)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                var _kZ_=_kY_}
              else
               var _kZ_=_kX_;
              return _kZ_}
            return 0}
          return e2?0:1}}
      function cardinal(param)
       {if(param)
         {var r=param[4],l=param[1],_kW_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _kW_ | 0}
        return 0}
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=l;
            continue}
          return accu$0}}
      function bindings(s){return bindings_aux(0,s)}
      function add_seq(i,m)
       {var acc=m,seq=i;
        for(;;)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             next=match[2],
             x=match[1],
             v=x[2],
             k=x[1],
             acc$0=add(k,v,acc),
             acc=acc$0,
             seq=next;
            continue}
          return acc}}
      function of_seq(i){return add_seq(i,empty)}
      function seq_of_enum(c,param)
       {if(c)
         {var rest=c[4],t=c[3],v=c[2],k=c[1],_kU_=cons_enum(t,rest);
          return [0,[0,k,v],function(_kV_){return seq_of_enum(_kU_,_kV_)}]}
        return 0}
      function to_seq(m)
       {var _kS_=cons_enum(m,0);
        return function(_kT_){return seq_of_enum(_kS_,_kT_)}}
      function to_seq_from(low,m)
       {var m$0=m,c=0;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             n=caml_call2(Ord[1],v,low);
            if(0 !== n)
             {if(0 <= n){var c$0=[0,v,d,r,c],m$0=l,c=c$0;continue}
              var m$0=r;
              continue}
            var _kQ_=[0,v,d,r,c]}
          else
           var _kQ_=c;
          return function(_kR_){return seq_of_enum(_kQ_,_kR_)}}}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              update,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              bindings,
              min_binding,
              min_binding_opt,
              max_binding,
              max_binding_opt,
              min_binding,
              min_binding_opt,
              split,
              find,
              find_opt,
              find_first,
              find_first_opt,
              find_last,
              find_last_opt,
              map,
              mapi,
              to_seq,
              to_seq_from,
              add_seq,
              of_seq]}
    caml_fresh_oo_id(0);
    function create(param){return [0,0,0]}
    function clear(s){s[1] = 0;s[2] = 0;return 0}
    function push(x,s){s[1] = [0,x,s[1]];s[2] = s[2] + 1 | 0;return 0}
    function pop_opt(s)
     {var _kO_=s[1];
      if(_kO_)
       {var tl=_kO_[2],hd=_kO_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return [0,hd]}
      return 0}
    function top_opt(s)
     {var _kN_=s[1];if(_kN_){var hd=_kN_[1];return [0,hd]}return 0}
    var Empty=[248,_A_,caml_fresh_oo_id(0)];
    function clear$0(q){q[1] = 0;q[2] = 0;q[3] = 0;return 0}
    function add(x,q)
     {var cell=[0,x,0],_kM_=q[3];
      return _kM_
              ?(q[1] = q[1] + 1 | 0,_kM_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    caml_fresh_oo_id(0);
    function create$0(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_E_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_C_]}
        throw [0,Assert_failure,_D_]}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       y=buf[1] + overhead | 0,
       _kK_=len < y?1:0;
      if(_kK_)
       {var
         x=len * 2 | 0,
         new_len=caml_greaterequal(x,y)?x:y,
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _kL_=0}
      else
       var _kL_=_kK_;
      return _kL_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,_O_);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,_R_);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,_S_);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,_T_);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,_U_);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,_V_);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_W_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_X_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_Y_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_Z_);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,___);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,_$_);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,_aa_);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,_ab_);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,_ac_);
           var fmtty$0=rest$13;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _km_=function(param){return 0},
         _kn_=function(param){return 0},
         _ko_=function(param){return 0};
        return [0,function(param){return 0},_ko_,_kn_,_km_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _kp_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_kp_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _kq_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _kq_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _kr_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _kr_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _ks_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _ks_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _kt_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _kt_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _ku_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _ku_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _kv_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _kv_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _kw_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _kw_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _kx_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _kx_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _ky_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _kz_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _kA_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _kA_,
                  _kz_,
                  _ky_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _kB_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _kB_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _kC_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _kC_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _kD_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _kD_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _kE_=function(param){caml_call1(de$12,0);return 0},
           _kF_=function(param){caml_call1(ed$12,0);return 0},
           _kG_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _kG_,
                  _kF_,
                  _kE_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _kH_=function(param){caml_call1(de$13,0);return 0},
           _kI_=function(param){caml_call1(ed$13,0);return 0},
           _kJ_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _kJ_,
                  _kI_,
                  _kH_]}}
    function trans(ty1,match)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_ad_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_j5_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_j5_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_j6_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_j6_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_j7_=ty1[1];
          if(typeof match === "number")
           switch$3 = 1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_j7_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_j8_=ty1[1];
          if(typeof match === "number")
           switch$4 = 1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_j8_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_j9_=ty1[1];
          if(typeof match === "number")
           switch$5 = 1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_j9_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_j__=ty1[1];
          if(typeof match === "number")
           switch$6 = 1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_j__,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_j$_=ty1[1];
          if(typeof match === "number")
           switch$7 = 1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_j$_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_ka_=ty1[1];
          if(typeof match === "number")
           switch$8 = 1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_ka_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_kb_=ty1[2],_kc_=ty1[1];
          if(typeof match === "number")
           switch$9 = 1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_kd_=trans(_kb_,rest2$7);
              return [8,trans(_kc_,ty2),_kd_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_am_];
          break;
         case 9:
          var switch$10=0,_ke_=ty1[3],_kf_=ty1[2],_kg_=ty1[1];
          if(typeof match === "number")
           switch$10 = 1;
          else
           switch(match[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_kf_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_kg_,ty22,trans(_ke_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_an_];
          break;
         case 10:
          var _kh_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_kh_,rest2$9)]}
          throw [0,Assert_failure,_ao_];
         case 11:
          var switch$11=0,_ki_=ty1[1];
          if(typeof match === "number")
           switch$11 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:var rest2$10=match[1];return [11,trans(_ki_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_ap_];
          break;
         case 12:
          var switch$12=0,_kj_=ty1[1];
          if(typeof match === "number")
           switch$12 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=match[1];return [12,trans(_kj_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_aq_];
          break;
         case 13:
          var switch$13=0,_kk_=ty1[1];
          if(typeof match === "number")
           switch$13 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=match[1];return [13,trans(_kk_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_ar_];
          break;
         default:
          var switch$14=0,_kl_=ty1[1];
          if(typeof match === "number")
           switch$14 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=match[1];return [14,trans(_kl_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_as_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ag_];
        case 1:throw [0,Assert_failure,_ah_];
        case 2:throw [0,Assert_failure,_ai_];
        case 3:throw [0,Assert_failure,_aj_];
        case 4:throw [0,Assert_failure,_ak_];
        case 5:throw [0,Assert_failure,_ae_];
        case 6:throw [0,Assert_failure,_af_];
        default:throw [0,Assert_failure,_al_]}}
    var Type_mismatch=[248,_at_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _j4_=match[2];
          if(typeof _j4_ !== "number" && 2 === _j4_[0])
           {var rest=_j4_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _jN_=match$1[2],
           _jM_=match$1[1];
          if(typeof _jN_ !== "number" && 1 === _jN_[0])
           {var
             fmtty_rest$1=_jN_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_jM_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _jP_=match$3[2],
           _jO_=match$3[1];
          if(typeof _jP_ !== "number" && 1 === _jP_[0])
           {var
             fmtty_rest$2=_jP_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_jO_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _jR_=match$5[3],
           _jQ_=match$5[1];
          if(typeof _jR_ !== "number" && 2 === _jR_[0])
           {var
             fmtty_rest$3=_jR_[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_jQ_,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _jT_=match$7[3],
           _jS_=match$7[1];
          if(typeof _jT_ !== "number" && 3 === _jT_[0])
           {var
             fmtty_rest$4=_jT_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_jS_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _jV_=match$9[3],
           _jU_=match$9[1];
          if(typeof _jV_ !== "number" && 4 === _jV_[0])
           {var
             fmtty_rest$5=_jV_[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_jU_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _jX_=match$11[3],
           _jW_=match$11[1];
          if(typeof _jX_ !== "number" && 5 === _jX_[0])
           {var
             fmtty_rest$6=_jX_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_jW_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _jZ_=match$13[3],
           _jY_=match$13[1];
          if(typeof _jZ_ !== "number" && 6 === _jZ_[0])
           {var
             fmtty_rest$7=_jZ_[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_jY_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _j1_=match$15[2],
           _j0_=match$15[1];
          if(typeof _j1_ !== "number" && 7 === _j1_[0])
           {var
             fmtty_rest$8=_j1_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_j0_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _j2_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_j2_))
             throw Type_mismatch;
            var
             match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$28=formatting_gen[1],
             str$0=match$28[2],
             fmt1=match$28[1],
             match$29=type_format_gen(fmt1,fmtty),
             fmtty2=match$29[2],
             fmt2=match$29[1],
             match$30=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$30[2],
             fmt3=match$30[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$31=formatting_gen[1],
           str$1=match$31[2],
           fmt1$0=match$31[1],
           match$32=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$32[2],
           fmt2$0=match$32[1],
           match$33=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$33[2],
           fmt3$0=match$33[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$34=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$34[2],
                 fmt$21=match$34[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _j3_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$35=_j3_[2],
               fmtty$22=match$35[2],
               fmt$22=match$35[1],
               sub_fmtty$4=_j3_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substituti(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _jK_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_jK_))
             throw Type_mismatch;
            var _jL_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_jL_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _jJ_=2 === padty$0?48:32,res=make(width$0,_jJ_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < (c - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0) && 1 < len)
               {var switch$2=0;
                if
                 (120
                  ===
                  caml_string_get(str,1)
                  ||
                  88
                  ===
                  caml_string_get(str,1))
                 switch$2 = 1;
                if(switch$2)
                 {var res$1=make(prec$0 + 2 | 0,48);
                  caml_bytes_set(res$1,1,caml_string_get(str,1));
                  blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                  return caml_string_of_bytes(res$1)}}
              switch$0 = 1;
              switch$1 = 1;
              break;
             case 0:
             case 2:break;
             case 1:
             case 3:
             case 4:switch$1 = 1;break;
             default:switch$0 = 1;switch$1 = 1}}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var n$0=caml_ml_string_length(str),i$1=0;
      for(;;)
       {if(n$0 <= i$1)
         var str$0=str;
        else
         {var
           match$0=caml_string_unsafe_get(str,i$1),
           _jH_=match$0 - 32 | 0,
           switch$0=0;
          if(59 < _jH_ >>> 0)
           {if(33 < (_jH_ - 61 | 0) >>> 0)switch$0 = 1}
          else
           if(2 === _jH_)switch$0 = 1;
          if(! switch$0){var i$2=i$1 + 1 | 0,i$1=i$2;continue}
          var
           s$0=caml_bytes_of_string(str),
           n=[0,0],
           _jA_=caml_ml_bytes_length(s$0) - 1 | 0,
           _jz_=0;
          if(! (_jA_ < 0))
           {var i$0=_jz_;
            for(;;)
             {var match=caml_bytes_unsafe_get(s$0,i$0),switch$1=0;
              if(32 <= match)
               {var _jE_=match - 34 | 0,switch$2=0;
                if(58 < _jE_ >>> 0)
                 {if(93 <= _jE_)switch$2 = 1}
                else
                 if(56 < (_jE_ - 1 | 0) >>> 0){switch$1 = 1;switch$2 = 1}
                if(! switch$2){var _jF_=1;switch$1 = 2}}
              else
               if(11 <= match)
                {if(13 === match)switch$1 = 1}
               else
                if(8 <= match)switch$1 = 1;
              switch(switch$1)
               {case 0:var _jF_=4;break;case 1:var _jF_=2;break}
              n[1] = n[1] + _jF_ | 0;
              var _jG_=i$0 + 1 | 0;
              if(_jA_ !== i$0){var i$0=_jG_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(s$0))
           {var len=caml_ml_bytes_length(s$0),r=caml_create_bytes(len);
            caml_blit_bytes(s$0,0,r,0,len);
            var _jI_=r}
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _jC_=caml_ml_bytes_length(s$0) - 1 | 0,_jB_=0;
            if(! (_jC_ < 0))
             {var i=_jB_;
              for(;;)
               {var c=caml_bytes_unsafe_get(s$0,i),switch$3=0;
                if(35 <= c)
                 if(92 === c)
                  switch$3 = 2;
                 else
                  if(127 <= c)switch$3 = 1;else switch$3 = 3;
                else
                 if(32 <= c)
                  if(34 <= c)switch$3 = 2;else switch$3 = 3;
                 else
                  if(14 <= c)
                   switch$3 = 1;
                  else
                   switch(c)
                    {case 8:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],98);
                      break;
                     case 9:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],116);
                      break;
                     case 10:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],110);
                      break;
                     case 13:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],114);
                      break;
                     default:switch$3 = 1}
                switch(switch$3)
                 {case 1:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 2:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],c);
                   break;
                  case 3:caml_bytes_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _jD_=i + 1 | 0;
                if(_jC_ !== i){var i=_jD_;continue}
                break}}
            var _jI_=s}
          var str$0=caml_string_of_bytes(_jI_)}
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return caml_string_of_bytes(res)}}
    function format_of_fconv(fconv,prec)
     {var prec$0=abs(prec);
      if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:var symb=102;break;
        case 1:var symb=101;break;
        case 2:var symb=69;break;
        case 3:var symb=103;break;
        case 4:var symb=71;break;
        case 5:var symb=cF;break;
        case 6:var symb=104;break;
        case 7:var symb=72;break;
        default:var symb=70}
      var buf=buffer_create(16);
      buffer_add_char(buf,37);
      switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      if(8 <= fconv[2])buffer_add_char(buf,35);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_ju_=caml_ml_string_length(s) - 1 | 0,_jt_=0;
        if(! (_ju_ < 0))
         {var i$0=_jt_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _jy_=i$0 + 1 | 0;
            if(_ju_ !== i$0){var i$0=_jy_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _jw_=caml_ml_string_length(s) - 1 | 0,
         _jv_=0;
        if(! (_jw_ < 0))
         {var i=_jv_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _jx_=i + 1 | 0;
            if(_jw_ !== i){var i=_jx_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _js_=_av_;break;
        case 2:var _js_=_aw_;break;
        case 4:var _js_=_ay_;break;
        case 5:var _js_=_az_;break;
        case 6:var _js_=_aA_;break;
        case 7:var _js_=_aB_;break;
        case 8:var _js_=_aC_;break;
        case 9:var _js_=_aD_;break;
        case 10:var _js_=_aE_;break;
        case 11:var _js_=_aF_;break;
        case 0:
        case 13:var _js_=_au_;break;
        case 3:
        case 14:var _js_=_ax_;break;
        default:var _js_=_aG_}
      return transform_int_alt(iconv,caml_format_int(_js_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _jr_=_aV_;break;
        case 2:var _jr_=_aW_;break;
        case 4:var _jr_=_aY_;break;
        case 5:var _jr_=_aZ_;break;
        case 6:var _jr_=_a0_;break;
        case 7:var _jr_=_a1_;break;
        case 8:var _jr_=_a2_;break;
        case 9:var _jr_=_a3_;break;
        case 10:var _jr_=_a4_;break;
        case 11:var _jr_=_a5_;break;
        case 0:
        case 13:var _jr_=_aU_;break;
        case 3:
        case 14:var _jr_=_aX_;break;
        default:var _jr_=_a6_}
      return transform_int_alt(iconv,caml_format_int(_jr_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _jq_=_a8_;break;
        case 2:var _jq_=_a9_;break;
        case 4:var _jq_=_a$_;break;
        case 5:var _jq_=_ba_;break;
        case 6:var _jq_=_bb_;break;
        case 7:var _jq_=_bc_;break;
        case 8:var _jq_=_bd_;break;
        case 9:var _jq_=_be_;break;
        case 10:var _jq_=_bf_;break;
        case 11:var _jq_=_bg_;break;
        case 0:
        case 13:var _jq_=_a7_;break;
        case 3:
        case 14:var _jq_=_a__;break;
        default:var _jq_=_bh_}
      return transform_int_alt(iconv,caml_format_int(_jq_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _jp_=_aI_;break;
        case 2:var _jp_=_aJ_;break;
        case 4:var _jp_=_aL_;break;
        case 5:var _jp_=_aM_;break;
        case 6:var _jp_=_aN_;break;
        case 7:var _jp_=_aO_;break;
        case 8:var _jp_=_aP_;break;
        case 9:var _jp_=_aQ_;break;
        case 10:var _jp_=_aR_;break;
        case 11:var _jp_=_aS_;break;
        case 0:
        case 13:var _jp_=_aH_;break;
        case 3:
        case 14:var _jp_=_aK_;break;
        default:var _jp_=_aT_}
      return transform_int_alt(iconv,caml_int64_format(_jp_,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return caml_hexstring_of_float(x,prec,sign)}
      function caml_special_val(str)
       {var match=caml_classify_float(x);
        return 3 === match?x < 0.?_bj_:_bk_:4 <= match?_bl_:str}
      switch(fconv[2])
       {case 5:
         var
          str=caml_format_float(format_of_fconv(fconv,prec),x),
          len=caml_ml_string_length(str),
          i$0=0;
         for(;;)
          {if(i$0 === len)
            var _jn_=0;
           else
            {var
              match=caml_string_get(str,i$0),
              _jm_=match - 46 | 0,
              switch$0=0;
             if(23 < _jm_ >>> 0)
              {if(55 === _jm_)switch$0 = 1}
             else
              if(21 < (_jm_ - 1 | 0) >>> 0)switch$0 = 1;
             if(! switch$0){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
             var _jn_=1}
           var _jo_=_jn_?str:symbol(str,_bi_);
           return caml_special_val(_jo_)}
        case 6:return hex(0);
        case 7:
         var s$0=hex(0),s=caml_bytes_of_string(s$0),l=caml_ml_bytes_length(s);
         if(0 === l)
          var _jl_=s;
         else
          {var r=caml_create_bytes(l),_ji_=l - 1 | 0,_jh_=0;
           if(! (_ji_ < 0))
            {var i=_jh_;
             for(;;)
              {var c=caml_bytes_unsafe_get(s,i),switch$1=0;
               if(97 <= c && ! (122 < c)){var _jj_=c - 32 | 0;switch$1 = 1}
               if(! switch$1)var _jj_=c;
               caml_bytes_unsafe_set(r,i,_jj_);
               var _jk_=i + 1 | 0;
               if(_ji_ !== i){var i=_jk_;continue}
               break}}
           var _jl_=r}
         return caml_string_of_bytes(_jl_);
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return match
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _je_=pad[2],_jf_=pad[1];
          if(typeof match === "number")
           return match
                   ?function(p,x)
                     {var
                       str=
                        fix_padding
                         (_jf_,_je_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var str=fix_padding(_jf_,_je_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_jf_,_je_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _jg_=pad[1];
        if(typeof match === "number")
         return match
                 ?function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_jg_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var str=fix_padding(_jg_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_jg_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var switch$0=0;
             if(40 <= c)
              if(92 === c)
               var str=_e_;
              else
               if(127 <= c)switch$0 = 1;else switch$0 = 2;
             else
              if(32 <= c)
               if(39 <= c)var str=_f_;else switch$0 = 2;
              else
               if(14 <= c)
                switch$0 = 1;
               else
                switch(c)
                 {case 8:var str=_g_;break;
                  case 9:var str=_h_;break;
                  case 10:var str=_i_;break;
                  case 13:var str=_j_;break;
                  default:switch$0 = 1}
             switch(switch$0)
              {case 1:
                var s=caml_create_bytes(4);
                caml_bytes_unsafe_set(s,0,92);
                caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=caml_string_of_bytes(s);
                break;
               case 2:
                var s$0=caml_create_bytes(1);
                caml_bytes_unsafe_set(s$0,0,c);
                var str=caml_string_of_bytes(s$0);
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _ja_=pad$5[2],_jb_=pad$5[1];
               if(typeof prec$3 === "number")
                return prec$3
                        ?function(p,x)
                          {var str=fix_padding(_jb_,_ja_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)}
                        :function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_jb_,_ja_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_jb_,_ja_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _jc_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(w,p,x)
                        {var str=fix_padding(_jc_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_jc_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_jc_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _jd_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _jd_[2] === "number")
              {var fmt=_jd_[1];
               return make_printf(k$0,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _i__=fmt$0[1];
           if(0 === _i__[0])
            {var
              rest$13=fmt$0[2],
              match=_i__[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_i__[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bm_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bn_];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bo_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_bp_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _i$_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_i$_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_i$_])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_i9_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bq_];
         default:throw [0,Assert_failure,_br_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _i8_=[8,acc,_bs_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_i8_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_i8_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _i7_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_i7_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_i7_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var fmting_lit=acc$0[2],p=acc$0[1];
           if(typeof fmting_lit === "number")
            switch(fmting_lit)
             {case 0:var s=_G_;break;
              case 1:var s=_H_;break;
              case 2:var s=_I_;break;
              case 3:var s=_J_;break;
              case 4:var s=_K_;break;
              case 5:var s=_L_;break;
              default:var s=_M_}
           else
            switch(fmting_lit[0])
             {case 0:var str=fmting_lit[1],s=str;break;
              case 1:var str$0=fmting_lit[1],s=str$0;break;
              default:var c=fmting_lit[1],s=symbol(_N_,make$0(1,c))}
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _i5_=acc$0[2],_i6_=acc$0[1];
           if(0 === _i5_[0])
            {var acc$1=_i5_[1];
             strput_acc(b,_i6_);
             add_string(b,_bt_);
             var acc$0=acc$1;
             continue}
           var acc$2=_i5_[1];
           strput_acc(b,_i6_);
           add_string(b,_bu_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c$0=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_bytes_unsafe_set(b[1],pos,c$0);
           b[2] = pos + 1 | 0;
           return 0}}
    function open_box_of_string(str)
     {if(caml_string_equal(str,_bv_))return _bw_;
      var len=caml_ml_string_length(str);
      function invalid_box(param$0)
       {var fmt=param[1],buf=create$0(256);
        function k(acc){strput_acc(buf,acc);return failwith(contents(buf))}
        return caml_call1(make_printf(k,0,fmt),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match && 32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switcher=match - 97 | 0;
          if(25 < switcher >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1;
          continue}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switch$0=0;
          if(48 <= match)
           {if(! (58 <= match))switch$0 = 1}
          else
           if(45 === match)switch$0 = 1;
          if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
          return j$0}}
      var
       wstart=parse_spaces(0),
       wend=parse_lword(wstart,wstart),
       box_name=sub$0(str,wstart,wend - wstart | 0),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _i3_=caml_int_of_string(sub$0(str,nstart,nend - nstart | 0)),
          indent=_i3_}
       catch(_i4_)
        {_i4_ = caml_wrap_exception(_i4_);
         if(_i4_[1] !== Failure)throw _i4_;
         var indent=invalid_box(0)}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len)invalid_box(0);
      var switch$0=0;
      if
       (caml_string_notequal(box_name,_bx_)
        &&
        caml_string_notequal(box_name,_by_))
       var
        box_type=
         caml_string_notequal(box_name,_bz_)
          ?caml_string_notequal(box_name,_bA_)
            ?caml_string_notequal(box_name,_bB_)
              ?caml_string_notequal(box_name,_bC_)?invalid_box(0):1
              :2
            :3
          :0;
      else
       switch$0 = 1;
      if(switch$0)var box_type=4;
      return [0,indent,box_type]}
    var printers=[0,0];
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    try
     {var _gk_=caml_sys_getenv(_gj_),params=_gk_}
    catch(_i1_)
     {_i1_ = caml_wrap_exception(_i1_);
      if(_i1_ !== Not_found)throw _i1_;
      try
       {var _gi_=caml_sys_getenv(_gh_),_bE_=_gi_}
      catch(_i2_)
       {_i2_ = caml_wrap_exception(_i2_);
        if(_i2_ !== Not_found)throw _i2_;
        var _bE_=_bD_}
      var params=_bE_}
    contains(params,82);
    var String_tag=[248,_bF_,caml_fresh_oo_id(0)],size=0,unknown=-1;
    function pp_enqueue(state,token)
     {state[13] = state[13] + token[3] | 0;return add(token,state[28])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function format_pp_text(state,size,text)
     {state[9] = state[9] - size | 0;
      pp_output_string(state,text);
      state[11] = 0;
      return 0}
    function format_string(state,s)
     {var _i0_=caml_string_notequal(s,_bG_);
      return _i0_?format_pp_text(state,caml_ml_string_length(s),s):_i0_}
    function break_new_line(state,param,width)
     {var after=param[3],offset=param[2],before=param[1];
      format_string(state,before);
      pp_output_newline(state);
      state[11] = 1;
      var
       y=(state[6] - width | 0) + offset | 0,
       _iZ_=state[8],
       real_indent=caml_lessequal(_iZ_,y)?_iZ_:y;
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      caml_call1(state[21],state[10]);
      return format_string(state,after)}
    function break_line(state,width){return break_new_line(state,_bH_,width)}
    function break_same_line(state,param)
     {var after=param[3],width=param[2],before=param[1];
      format_string(state,before);
      state[9] = state[9] - width | 0;
      caml_call1(state[20],width);
      return format_string(state,after)}
    function advance_left(state)
     {for(;;)
       {var _iP_=state[28][2];
        if(_iP_)var content=_iP_[1],match$12=[0,content];else var match$12=0;
        if(match$12)
         {var
           match$13=match$12[1],
           size$0=match$13[1],
           length$0=match$13[3],
           token=match$13[2],
           pending_count=state[13] - state[12] | 0,
           _iW_=0 <= size$0?1:0,
           _iX_=_iW_ || (state[9] <= pending_count?1:0);
          if(_iX_)
           {var _iY_=state[28],_iQ_=_iY_[2];
            if(_iQ_)
             {if(_iQ_[2])
               {var next=_iQ_[2];_iY_[1] = _iY_[1] - 1 | 0;_iY_[2] = next}
              else
               clear$0(_iY_);
              var size$1=0 <= size$0?size$0:pp_infinity;
              if(typeof token === "number")
               switch(token)
                {case 0:
                  var match$3=top_opt(state[3]);
                  if(match$3)
                   {var
                     match$4=match$3[1],
                     tabs=match$4[1],
                     add_tab=
                      function(n,ls)
                       {if(ls)
                         {var l=ls[2],x=ls[1];
                          return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                        return [0,n,0]};
                    tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1])}
                  break;
                 case 1:pop_opt(state[2]);break;
                 case 2:pop_opt(state[3]);break;
                 case 3:
                  var match$5=top_opt(state[2]);
                  if(match$5)
                   {var match$6=match$5[1],width$0=match$6[2];
                    break_line(state,width$0)}
                  else
                   pp_output_newline(state);
                  break;
                 case 4:
                  if(state[10] !== (state[6] - state[9] | 0))
                   {var _iT_=state[28],_iR_=_iT_[2];
                    if(_iR_)
                     {var _iS_=_iR_[1];
                      if(_iR_[2])
                       {var next$0=_iR_[2];
                        _iT_[1] = _iT_[1] - 1 | 0;
                        _iT_[2] = next$0;
                        var match$1=[0,_iS_]}
                      else
                       {clear$0(_iT_);var match$1=[0,_iS_]}}
                    else
                     var match$1=0;
                    if(match$1)
                     {var match$2=match$1[1],size=match$2[1],length=match$2[3];
                      state[12] = state[12] - length | 0;
                      state[9] = state[9] + size | 0}}
                  break;
                 default:
                  var match$7=pop_opt(state[5]);
                  if(match$7)
                   {var
                     tag_name=match$7[1],
                     marker=caml_call1(state[25],tag_name);
                    pp_output_string(state,marker)}}
              else
               switch(token[0])
                {case 0:var s=token[1];format_pp_text(state,size$1,s);break;
                 case 1:
                  var
                   breaks=token[2],
                   fits=token[1],
                   off=breaks[2],
                   before=breaks[1],
                   match$8=top_opt(state[2]);
                  if(match$8)
                   {var
                     match$9=match$8[1],
                     width$1=match$9[2],
                     box_type$0=match$9[1];
                    switch(box_type$0)
                     {case 0:break_same_line(state,fits);break;
                      case 1:break_new_line(state,breaks,width$1);break;
                      case 2:break_new_line(state,breaks,width$1);break;
                      case 3:
                       if(state[9] < (size$1 + caml_ml_string_length(before) | 0))
                        break_new_line(state,breaks,width$1);
                       else
                        break_same_line(state,fits);
                       break;
                      case 4:
                       if(state[11])
                        break_same_line(state,fits);
                       else
                        if(state[9] < (size$1 + caml_ml_string_length(before) | 0))
                         break_new_line(state,breaks,width$1);
                        else
                         if(((state[6] - width$1 | 0) + off | 0) < state[10])
                          break_new_line(state,breaks,width$1);
                         else
                          break_same_line(state,fits);
                       break;
                      default:break_same_line(state,fits)}}
                  break;
                 case 2:
                  var
                   off$0=token[2],
                   n=token[1],
                   insertion_point=state[6] - state[9] | 0,
                   match$10=top_opt(state[3]);
                  if(match$10)
                   {var match$11=match$10[1],tabs$0=match$11[1],_iU_=tabs$0[1];
                    if(_iU_)
                     {var first=_iU_[1],param=tabs$0[1];
                      for(;;)
                       {if(param)
                         {var tail=param[2],head=param[1];
                          if(! (insertion_point <= head)){var param=tail;continue}
                          var _iV_=head}
                        else
                         var _iV_=first;
                        var tab=_iV_;
                        break}}
                    else
                     var tab=insertion_point;
                    var offset=tab - insertion_point | 0;
                    if(0 <= offset)
                     break_same_line(state,[0,_bJ_,offset + n | 0,_bI_]);
                    else
                     break_new_line(state,[0,_bL_,tab + off$0 | 0,_bK_],state[6])}
                  break;
                 case 3:
                  var
                   ty=token[2],
                   off$1=token[1],
                   insertion_point$0=state[6] - state[9] | 0;
                  if(state[8] < insertion_point$0)
                   {var match=top_opt(state[2]);
                    if(match)
                     {var match$0=match[1],width=match$0[2],box_type=match$0[1];
                      if(state[9] < width)
                       {var switcher=box_type - 1 | 0;
                        if(! (3 < switcher >>> 0))break_line(state,width)}}
                    else
                     pp_output_newline(state)}
                  var
                   width$2=state[9] - off$1 | 0,
                   box_type$1=1 === ty?1:state[9] < size$1?ty:5;
                  push([0,box_type$1,width$2],state[2]);
                  break;
                 case 4:var tbox=token[1];push(tbox,state[3]);break;
                 default:
                  var
                   tag_name$0=token[1],
                   marker$0=caml_call1(state[24],tag_name$0);
                  pp_output_string(state,marker$0);
                  push(tag_name$0,state[5])}
              state[12] = length$0 + state[12] | 0;
              continue}
            throw Empty}
          return _iX_}
        return 0}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],size])}
    function initialize_scan_stack(stack)
     {clear(stack);
      var queue_elem=[0,unknown,_bM_,0];
      return push([0,-1,queue_elem],stack)}
    function set_size(state,ty)
     {var match=top_opt(state[1]);
      if(match)
       {var
         match$0=match[1],
         queue_elem=match$0[2],
         left_total=match$0[1],
         _iM_=queue_elem[1];
        if(left_total < state[12])return initialize_scan_stack(state[1]);
        var _iN_=queue_elem[2];
        if(typeof _iN_ !== "number")
         switch(_iN_[0])
          {case 3:
            var _iO_=1 - ty;
            return _iO_
                    ?(queue_elem[1] = state[13] + _iM_ | 0,pop_opt(state[1]),0)
                    :_iO_;
           case 1:
           case 2:
            return ty
                    ?(queue_elem[1] = state[13] + _iM_ | 0,pop_opt(state[1]),0)
                    :ty
           }
        return 0}
      return 0}
    function scan_push(state,b,token)
     {pp_enqueue(state,token);
      if(b)set_size(state,1);
      var elem=[0,state[13],token];
      return push(elem,state[1])}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var size=- state[13] | 0,elem=[0,size,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _iK_=state[14] === state[15]?1:0;
      if(_iK_)
       {var _iL_=state[16];
        return enqueue_string_as(state,caml_ml_string_length(_iL_),_iL_)}
      return _iK_}
    function pp_close_box(state,param)
     {var _iI_=1 < state[14]?1:0;
      if(_iI_)
       {if(state[14] < state[15])
         {pp_enqueue(state,[0,size,1,0]);set_size(state,1);set_size(state,0)}
        state[14] = state[14] - 1 | 0;
        var _iJ_=0}
      else
       var _iJ_=_iI_;
      return _iJ_}
    function pp_close_tag(state,param)
     {if(state[23])pp_enqueue(state,[0,size,5,0]);
      var _iG_=state[22];
      if(_iG_)
       {var match=pop_opt(state[4]);
        if(match){var tag_name=match[1];return caml_call1(state[27],tag_name)}
        var _iH_=0}
      else
       var _iH_=_iG_;
      return _iH_}
    function pp_flush_queue(state,b)
     {var param=state[4][1];
      for(;;)
       {if(param){var l=param[2];pp_close_tag(state,0);var param=l;continue}
        for(;;)
         {if(1 < state[14]){pp_close_box(state,0);continue}
          state[13] = pp_infinity;
          advance_left(state);
          if(b)pp_output_newline(state);
          state[12] = 1;
          state[13] = 1;
          clear$0(state[28]);
          initialize_scan_stack(state[1]);
          clear(state[2]);
          clear(state[3]);
          clear(state[4]);
          clear(state[5]);
          state[10] = 0;
          state[14] = 0;
          state[9] = state[6];
          return pp_open_box_gen(state,0,3)}}}
    function pp_print_as_size(state,size,s)
     {var _iF_=state[14] < state[15]?1:0;
      return _iF_?enqueue_string_as(state,size,s):_iF_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,isize,s)}
    function pp_print_char(state,c){return pp_print_as(state,1,make$0(1,c))}
    function pp_print_flush(state,param)
     {pp_flush_queue(state,0);return caml_call1(state[18],0)}
    var blank_line=make$0(80,32);
    function display_indent(state,n)
     {var n$0=n;
      for(;;)
       {var _iE_=0 < n$0?1:0;
        if(_iE_)
         {if(80 < n$0)
           {caml_call3(state[17],blank_line,0,80);
            var n$1=n$0 - 80 | 0,n$0=n$1;
            continue}
          return caml_call3(state[17],blank_line,0,n$0)}
        return _iE_}}
    function default_pp_mark_open_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return symbol(_bT_,symbol(s,_bS_))}
      return _bU_}
    function default_pp_mark_close_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return symbol(_bW_,symbol(s,_bV_))}
      return _bX_}
    function default_pp_print_open_tag(_iD_){return 0}
    function default_pp_print_close_tag(_iC_){return 0}
    function make_formatter(output,flush)
     {function j(_iB_){return 0}
      function i(_iA_){return 0}
      function h(_iz_){return 0}
      var pp_queue=[0,0,0,0],sys_tok=[0,unknown,_bY_,0];
      add(sys_tok,pp_queue);
      var scan_stack=create(0);
      initialize_scan_stack(scan_stack);
      push([0,1,sys_tok],scan_stack);
      var
       _it_=create(0),
       _iu_=create(0),
       _iv_=create(0),
       ppf=
        [0,
         scan_stack,
         create(0),
         _iv_,
         _iu_,
         _it_,
         78,
         10,
         68,
         78,
         0,
         1,
         1,
         1,
         1,
         max_int,
         _bZ_,
         output,
         flush,
         h,
         i,
         j,
         0,
         0,
         default_pp_mark_open_tag,
         default_pp_mark_close_tag,
         default_pp_print_open_tag,
         default_pp_print_close_tag,
         pp_queue];
      ppf[19] = function(_iy_){return caml_call3(ppf[17],_bR_,0,1)};
      ppf[20] = function(_ix_){return display_indent(ppf,_ix_)};
      ppf[21] = function(_iw_){return display_indent(ppf,_iw_)};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _is_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(s,ofs,len)
                {if
                  (0
                   <=
                   ofs
                   &&
                   0
                   <=
                   len
                   &&
                   !
                   ((caml_ml_string_length(s) - len | 0) < ofs))
                  return caml_ml_output(oc,s,ofs,len);
                 return invalid_arg(_c_)},
               _is_)}
    function formatter_of_buffer(b)
     {function _in_(_ir_){return 0}
      return make_formatter
              (function(s,offset,len)
                {var _io_=offset < 0?1:0;
                 if(_io_)
                  var _ip_=_io_;
                 else
                  var
                   _iq_=len < 0?1:0,
                   _ip_=
                    _iq_
                    ||
                    ((caml_ml_string_length(s) - len | 0) < offset?1:0);
                 if(_ip_)invalid_arg(_F_);
                 var new_position=b[2] + len | 0;
                 if(b[3] < new_position)resize(b,len);
                 caml_blit_string(s,offset,b[1],b[2],len);
                 b[2] = new_position;
                 return 0},
               _in_)}
    var pp_buffer_size=512;
    function pp_make_buffer(param){return create$0(pp_buffer_size)}
    var
     stdbuf=pp_make_buffer(0),
     std_formatter=formatter_of_out_channel(stdout),
     ppf=formatter_of_out_channel(stderr);
    formatter_of_buffer(stdbuf);
    function compute_tag(output,tag_acc)
     {var b=create$0(16),ppf=formatter_of_buffer(b);
      caml_call2(output,ppf,tag_acc);
      pp_print_flush(ppf,0);
      var len=b[2];
      if(2 <= len)
       {var len$0=len - 2 | 0,ofs=1;
        if(0 <= len$0 && ! ((b[2] - len$0 | 0) < 1))
         return sub_string(b[1],ofs,len$0);
        return invalid_arg(_B_)}
      return contents(b)}
    function output_acc(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          output_acc(ppf,p);
          if(typeof f === "number")
           switch(f)
            {case 0:return pp_close_box(ppf,0);
             case 1:return pp_close_tag(ppf,0);
             case 2:return pp_print_flush(ppf,0);
             case 3:
              var _ib_=ppf[14] < ppf[15]?1:0;
              return _ib_?enqueue_advance(ppf,[0,size,3,0]):_ib_;
             case 4:pp_flush_queue(ppf,1);return caml_call1(ppf[18],0);
             case 5:return pp_print_char(ppf,64);
             default:return pp_print_char(ppf,37)}
          else
           switch(f[0])
            {case 0:
              var
               offset=f[3],
               width$0=f[2],
               breaks=[0,_bO_,offset,_bN_],
               fits=[0,_bQ_,width$0,_bP_],
               after=fits[3],
               width=fits[2],
               before=fits[1],
               _ic_=ppf[14] < ppf[15]?1:0;
              if(_ic_)
               {var
                 size$0=- ppf[13] | 0,
                 token$0=[1,fits,breaks],
                 length=
                  (caml_ml_string_length(before) + width | 0)
                  +
                  caml_ml_string_length(after)
                  |
                  0,
                 elem=[0,size$0,token$0,length];
                return scan_push(ppf,1,elem)}
              return _ic_;
             case 1:return 0;
             default:
              var c=f[1];pp_print_char(ppf,64);return pp_print_char(ppf,c)}
         case 1:
          var _id_=acc[2],_ie_=acc[1];
          if(0 === _id_[0])
           {var acc$0=_id_[1];
            output_acc(ppf,_ie_);
            var tag_name=[0,String_tag,compute_tag(output_acc,acc$0)];
            if(ppf[22]){push(tag_name,ppf[4]);caml_call1(ppf[26],tag_name)}
            var _ia_=ppf[23];
            if(_ia_)
             {var token=[5,tag_name];return pp_enqueue(ppf,[0,size,token,0])}
            return _ia_}
          var acc$1=_id_[1];
          output_acc(ppf,_ie_);
          var
           match=open_box_of_string(compute_tag(output_acc,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _if_=acc[1],switch$1=0;
          if(typeof _if_ !== "number" && 0 === _if_[0])
           {var _ig_=_if_[2],switch$2=0;
            if(typeof _ig_ !== "number" && 1 === _ig_[0])
             {var s$0=acc[2],size$1=_ig_[2],p$1=_if_[1];
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var s=acc[2],p$0=_if_;switch$0 = 2}
          break;
         case 3:
          var _ih_=acc[1],switch$3=0;
          if(typeof _ih_ !== "number" && 0 === _ih_[0])
           {var _ii_=_ih_[2],switch$4=0;
            if(typeof _ii_ !== "number" && 1 === _ii_[0])
             {var c$1=acc[2],size$2=_ii_[2],p$3=_ih_[1];
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var c$0=acc[2],p$2=_ih_;switch$0 = 3}
          break;
         case 4:
          var _ij_=acc[1],switch$5=0;
          if(typeof _ij_ !== "number" && 0 === _ij_[0])
           {var _ik_=_ij_[2],switch$6=0;
            if(typeof _ik_ !== "number" && 1 === _ik_[0])
             {var s$0=acc[2],size$1=_ik_[2],p$1=_ij_[1];
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var s=acc[2],p$0=_ij_;switch$0 = 2}
          break;
         case 5:
          var _il_=acc[1],switch$7=0;
          if(typeof _il_ === "number" || ! (0 === _il_[0]))
           switch$7 = 1;
          else
           {var _im_=_il_[2],switch$8=0;
            if(typeof _im_ !== "number" && 1 === _im_[0])
             {var c$1=acc[2],size$2=_im_[2],p$3=_il_[1];
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var c$0=acc[2],p$2=_il_;switch$0 = 3}
          break;
         case 6:
          var f$0=acc[2],p$4=acc[1];
          output_acc(ppf,p$4);
          return caml_call1(f$0,ppf);
         case 7:
          var p$5=acc[1];output_acc(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          output_acc(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:output_acc(ppf,p$1);return pp_print_as_size(ppf,size$1,s$0);
        case 1:
         output_acc(ppf,p$3);
         return pp_print_as_size(ppf,size$2,make$0(1,c$1));
        case 2:
         output_acc(ppf,p$0);
         return pp_print_as(ppf,caml_ml_string_length(s),s);
        default:output_acc(ppf,p$2);return pp_print_char(ppf,c$0)}}
    function kfprintf(k,ppf,param)
     {var fmt=param[1],_h$_=0;
      return make_printf
              (function(acc){output_acc(ppf,acc);return caml_call1(k,ppf)},
               _h$_,
               fmt)}
    function fprintf(ppf)
     {function _h8_(_h__){return 0}
      return function(_h9_){return kfprintf(_h8_,ppf,_h9_)}}
    function printf(fmt){return caml_call1(fprintf(std_formatter),fmt)}
    function flush_standard_formatters(param)
     {pp_print_flush(std_formatter,0);return pp_print_flush(ppf,0)}
    at_exit(flush_standard_formatters);
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var initial_object_size=2;
    function public_method_label(s)
     {var accu=[0,0],_h5_=caml_ml_string_length(s) - 1 | 0,_h4_=0;
      if(! (_h5_ < 0))
       {var i=_h4_;
        for(;;)
         {var _h6_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _h6_ | 0;
          var _h7_=i + 1 | 0;
          if(_h5_ !== i){var i=_h7_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    var
     compare=caml_string_compare,
     Vars=_z_([0,compare]),
     compare$0=caml_string_compare,
     Meths=_z_([0,compare$0]),
     compare$1=caml_int_compare,
     Labs=_z_([0,compare$1]),
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _hY_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _hY_;
      var _h0_=len - 1 | 0,_hZ_=0;
      if(! (_h0_ < 0))
       {var i=_hZ_;
        for(;;)
         {var
           _h2_=(i * 2 | 0) + 3 | 0,
           _h1_=caml_check_bound(pub_labels,i)[1 + i];
          caml_check_bound(methods,_h2_)[1 + _h2_] = _h1_;
          var _h3_=i + 1 | 0;
          if(_h0_ !== i){var i=_h3_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$0(array,new_size)
     {var len=array[2].length - 1,_hV_=len < new_size?1:0;
      if(_hV_)
       {var a2=caml_make_vect(new_size,dummy_met),_hW_=array[2],switch$0=0;
        if
         (0
          <=
          len
          &&
          !
          ((_hW_.length - 1 - len | 0) < 0)
          &&
          !
          ((a2.length - 1 - len | 0) < 0))
         {caml_array_blit(_hW_,0,a2,0,len);switch$0 = 1}
        if(! switch$0)invalid_arg(_q_);
        array[2] = a2;
        var _hX_=0}
      else
       var _hX_=_hV_;
      return _hX_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$0(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _hT_=caml_call2(Meths[27],name,table[3]);return _hT_}
      catch(_hU_)
       {_hU_ = caml_wrap_exception(_hU_);
        if(_hU_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _hU_}}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _hR_=caml_call2(Vars[27],name,table[7]);return _hR_}
      catch(_hS_)
       {_hS_ = caml_wrap_exception(_hS_);
        if(_hS_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,_b0_))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _hS_}}
    function new_cache(table)
     {var n=new_method(table),switch$0=0;
      if
       (0
        !==
        (n % 2 | 0)
        &&
        !
        ((2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0) < n))
       {var n$0=new_method(table);switch$0 = 1}
      if(! switch$0)var n$0=n;
      caml_check_bound(table[2],n$0)[1 + n$0] = 0;
      return n$0}
    var global=joo_global_object,null$0=null,undefined$0=undefined;
    function to_option(x){return x == null$0?0:[0,x]}
    var
     object_constructor=global.Object,
     array_length=global.Array,
     Error=[248,_b1_,caml_fresh_oo_id(0)];
    register_exception(_b2_,[0,Error,{}]);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error)
         {var e=param[2];return [0,caml_string_of_jsstring(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_length
                ?0
                :[0,caml_string_of_jsstring(e.toString())]});
    function export$0(field,x)
     {var field$0=caml_jsstring_of_string(field);
      return caml_js_export_var(0)[field$0] = x}
    function make_alphabet(alphabet)
     {if(64 !== caml_ml_string_length(alphabet))invalid_arg(_b3_);
      if(contains(alphabet,61))invalid_arg(_b4_);
      function f(i){return caml_string_get(alphabet,i)}
      var l=caml_ml_string_length(alphabet);
      if(0 === l)
       var emap=[0];
      else
       if(0 <= l)
        {var res=caml_make_vect(l,f(0)),_hP_=l - 1 | 0,_hO_=1;
         if(! (_hP_ < 1))
          {var i$0=_hO_;
           for(;;)
            {res[1 + i$0] = f(i$0);
             var _hQ_=i$0 + 1 | 0;
             if(_hP_ !== i$0){var i$0=_hQ_;continue}
             break}}
         var emap=res}
       else
        var emap=invalid_arg(_p_);
      var
       dmap=caml_make_vect(256,-1),
       _hM_=caml_ml_string_length(alphabet) - 1 | 0,
       _hL_=0;
      if(! (_hM_ < 0))
       {var i=_hL_;
        for(;;)
         {var chr=caml_string_unsafe_get(alphabet,i);
          caml_check_bound(dmap,chr)[1 + chr] = i;
          var _hN_=i + 1 | 0;
          if(_hM_ !== i){var i=_hN_;continue}
          break}}
      return [0,emap,dmap]}
    make_alphabet(_b5_);
    make_alphabet(_b6_);
    caml_fresh_oo_id(0);
    caml_fresh_oo_id(0);
    function pp_t(ppf,t)
     {var _hI_=caml_ba_dim_1(t[1]),_hJ_=t[3],_hK_=t[2];
      return caml_call4(fprintf(ppf),_b7_,_hK_,_hJ_,_hI_)}
    function string_t(ppf,str)
     {return caml_call2(fprintf(ppf),_b8_,caml_ml_string_length(str))}
    function err(fmt)
     {var b=create$0(20),ppf=formatter_of_buffer(b);
      function k(ppf){pp_print_flush(ppf,0);return invalid_arg(contents(b))}
      return kfprintf(k,ppf,fmt)}
    function create_unsafe(len)
     {var buffer=caml_ba_create(12,0,[0,len]);return [0,buffer,0,len]}
    create_unsafe(0);
    function blitfun(src,srcoff,dst,dstoff,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        srcoff
        &&
        0
        <=
        dstoff
        &&
        !
        ((caml_ml_string_length(src) - srcoff | 0) < len))
       return (dst[3] - dstoff | 0) < len
               ?caml_call2
                 (caml_call4(err(_b$_),string_t,src,pp_t,dst),dstoff,len)
               :caml_blit_string_to_bigstring
                 (src,srcoff,dst[1],dst[2] + dstoff | 0,len);
      return caml_call2
              (caml_call4(err(_b__),string_t,src,pp_t,dst),srcoff,len)}
    function of_string(allocator,off$0,len$1,buf)
     {if(off$0)var sth=off$0[1],off=sth;else var off=0;
      if(len$1)
       var len$0=len$1[1],buflen=len$0;
      else
       var buflen=caml_ml_string_length(buf);
      if(allocator)
       {var fn=allocator[1],t=caml_call1(fn,buflen);
        blitfun(buf,off,t,0,buflen);
        if(0 <= buflen)
         {var
           len=t[2] + buflen | 0,
           _hG_=0 <= len?1:0,
           _hH_=_hG_?len <= caml_ba_dim_1(t[1])?1:0:_hG_;
          if(_hH_)return [0,t[1],t[2],buflen]}
        return caml_call1(caml_call2(err(_b9_),pp_t,t),buflen)}
      var c=create_unsafe(buflen);
      blitfun(buf,off,c,0,buflen);
      return c}
    function hexdump_pp(fmt,t)
     {function before(fmt,param)
       {return 0 === param
                ?0
                :8 === param
                  ?caml_call1(fprintf(fmt),_ca_)
                  :caml_call1(fprintf(fmt),_cb_)}
      function after(fmt,param)
       {return 15 === param?caml_call1(fprintf(fmt),_cc_):0}
      pp_open_box_gen(fmt,0,1);
      var _hE_=t[3] - 1 | 0,_hD_=0;
      if(! (_hE_ < 0))
       {var i=_hD_;
        for(;;)
         {var column=i % 16 | 0,c=caml_ba_get_1(t[1],t[2] + i | 0);
          caml_call6(fprintf(fmt),_cd_,before,column,c,after,column);
          var _hF_=i + 1 | 0;
          if(_hE_ !== i){var i=_hF_;continue}
          break}}
      return pp_close_box(fmt,0)}
    caml_call1(printf(_ce_),hexdump_pp);
    of_string(0,0,0,_cf_);
    function to_js(Codec,x){return caml_call1(Codec[1],x)}
    function of_js(Codec,x){return caml_call1(Codec[2],x)}
    var undefined$1=undefined;
    function comp(f,g,x){return caml_call1(f,caml_call1(g,x))}
    function codec_with(jsenc,jsdec)
     {function to_js(x){return caml_call1(jsenc,x)}
      function of_js(x){return caml_call1(jsdec,x)}
      return [0,to_js,of_js]}
    function fenc(param)
     {var x=param[3],codec=param[2],fname=param[1];
      return [0,fname,to_js(codec,x)]}
    var Field_codec_mismatch=[248,_cg_,caml_fresh_oo_id(0)];
    function find_field(fname,codec,fvalues)
     {var
       param=
        assoc
         (fname,
          map$0(function(fv){var fname=fv[1];return [0,fname,fv]},fvalues)),
       x=param[3],
       c=param[2];
      if(c === codec)return of_js(codec,x);
      var c$0=param[2];
      throw [0,Field_codec_mismatch,c$0,codec]}
    function find_option_field(fname,codec,fvalues)
     {var
       param$0=
        map$0(function(fv){var fname=fv[1];return [0,fname,fv]},fvalues),
       param=param$0;
      for(;;)
       {if(param)
         {var l=param[2],match=param[1],b=match[2],a=match[1];
          if(0 !== caml_compare(a,fname)){var param=l;continue}
          var _hC_=[0,b]}
        else
         var _hC_=0;
        if(_hC_)
         {var match$0=_hC_[1],x=match$0[3],c=match$0[2];
          if(c === codec)return of_js(codec,x);
          var c$0=match$0[2];
          throw [0,Field_codec_mismatch,c$0,codec]}
        return of_js(codec,undefined$1)}}
    function codec_record(param)
     {var projector=param[3],injector=param[2],fields=param[1];
      function jsenc(x)
       {return caml_js_object(of_list(map$0(fenc,caml_call1(projector,x))))}
      function jsdec(x)
       {return caml_call1
                (injector,
                 map$0
                  (function(param)
                    {var
                      codec=param[2],
                      fname=param[1],
                      js=x[caml_jsstring_of_string(fname)];
                     return [0,fname,codec,js]},
                   fields))}
      return codec_with(jsenc,jsdec)}
    function codec_variant(param)
     {var brancher=param[3],decoder=param[2],encoder=param[1];
      function jsdec(x)
       {var branch=caml_call1(brancher,x);
        return caml_call1(decoder,[0,branch,x])}
      return codec_with(encoder,jsdec)}
    var
     field_codec_timestamp=
      codec_with(caml_jsstring_of_string,caml_string_of_jsstring);
    function _ch_(_hB_){return _hB_}
    var field_codec_amount=codec_with(function(_hA_){return _hA_},_ch_);
    function _ci_(_hz_){return _hz_}
    function _cj_(_hy_){return _hy_ | 0}
    function _ck_(_hx_){return comp(_cj_,_ci_,_hx_)}
    function _cl_(_hw_){return _hw_}
    function _cm_(_hv_){return _hv_}
    var
     field_codec_optxnid=
      codec_with(function(_hu_){return comp(_cm_,_cl_,_hu_)},_ck_);
    function codec_list(codec)
     {function jsenc(x)
       {return caml_js_from_array
                (of_list(map$0(function(_ht_){return to_js(codec,_ht_)},x)))}
      function jsdec(x)
       {var _hr_=to_list(caml_js_to_array(x));
        return map$0(function(_hs_){return of_js(codec,_hs_)},_hr_)}
      return codec_with(jsenc,jsdec)}
    function codec_option(codec)
     {function jsenc(x)
       {if(x){var x$0=x[1];return to_js(codec,x$0)}return undefined$1}
      function jsdec(x)
       {var x$0=x === undefined$0?undefined$0:[0,of_js(codec,x)];
        return x$0 === undefined$0?0:x$0}
      return codec_with(jsenc,jsdec)}
    function last(list)
     {if(list)var a=list[1],_hq_=a;else var _hq_=failwith(_k_);
      var accu=_hq_,l=list;
      for(;;){if(l){var l$0=l[2],a$0=l[1],accu=a$0,l=l$0;continue}return accu}}
    function lookup(dict,key)
     {if(0 === dict[0]){var items=dict[1];return assoc(key,items)}
      var items$0=dict[2],kf=dict[1];
      return assoc
              (key,
               map$0
                (function(param)
                  {var v=param[2],k=param[1];return [0,caml_call1(kf,k),v]},
                 items$0))}
    function datafy(param)
     {if(0 === param[0]){var item=param[1];return item}
      var items=param[2],kf=param[1];
      return map$0
              (function(param)
                {var v=param[2],k=param[1];return [0,caml_call1(kf,k),v]},
               items)}
    function codec_diff(codec)
     {var lcodec=codec_list(codec);
      function jsenc(param)
       {var nv=param[2],ov=param[1];return to_js(lcodec,[0,ov,[0,nv,0]])}
      function jsdec(js)
       {var match=of_js(lcodec,js);
        if(match)
         {var _hp_=match[2];
          if(_hp_ && ! _hp_[2]){var nv=_hp_[1],ov=match[1];return [0,ov,nv]}}
        throw [0,Invalid_argument,_cn_]}
      return codec_with(jsenc,jsdec)}
    function codec_dictionary(codec)
     {function jsenc(x)
       {return caml_js_object
                (of_list
                  (map$0
                    (function(param)
                      {var v=param[2],k=param[1];return [0,k,to_js(codec,v)]},
                     x)))}
      function jsdec(x)
       {var _hn_=to_list(caml_js_to_array(object_constructor.keys(x)));
        return map$0
                (function(key)
                  {var _ho_=of_js(codec,x[key]);
                   return [0,caml_string_of_jsstring(key),_ho_]},
                 _hn_)}
      var acodec=codec_with(jsenc,jsdec);
      function jsenc$0(d){return to_js(acodec,datafy(d))}
      function jsdec$0(js){return [0,of_js(acodec,js)]}
      return codec_with(jsenc$0,jsdec$0)}
    var
     fields=
      to_list([0,[0,_cp_,field_codec_amount],[0,_co_,field_codec_amount]]);
    function injector(fields)
     {var
       chain_fee=find_field(_cq_,field_codec_amount,fields),
       chain_burn=find_field(_cr_,field_codec_amount,fields);
      return [254,chain_fee,chain_burn]}
    function projector(param)
     {var chain_burn=param[2],chain_fee=param[1];
      return to_list
              ([0,
                [0,_ct_,field_codec_amount,chain_fee],
                [0,_cs_,field_codec_amount,chain_burn]])}
    var
     field_codec_fees=codec_record([0,fields,injector,projector]),
     fields$0=
      to_list([0,[0,_cv_,field_codec_amount],[0,_cu_,field_codec_amount]]);
    function injector$0(fields)
     {var
       agency_fee=find_field(_cw_,field_codec_amount,fields),
       provider_fee=find_field(_cx_,field_codec_amount,fields);
      return [254,agency_fee,provider_fee]}
    function projector$0(param)
     {var provider_fee=param[2],agency_fee=param[1];
      return to_list
              ([0,
                [0,_cz_,field_codec_amount,agency_fee],
                [0,_cy_,field_codec_amount,provider_fee]])}
    var
     field_codec_template_fees=
      codec_record([0,fields$0,injector$0,projector$0]),
     fields$1=
      to_list
       ([0,
         [0,_cD_,field_codec_timestamp],
         [0,_cC_,field_codec_timestamp],
         [0,_cB_,field_codec_timestamp],
         [0,_cA_,field_codec_timestamp]]);
    function injector$1(fields)
     {var
       sprthash=find_field(_cE_,field_codec_timestamp,fields),
       chainid=find_field(_cF_,field_codec_timestamp,fields),
       broker=find_field(_cG_,field_codec_timestamp,fields),
       tmplhash=find_field(_cH_,field_codec_timestamp,fields);
      return [0,sprthash,chainid,broker,tmplhash]}
    function projector$1(param)
     {var
       tmplhash=param[4],
       broker=param[3],
       chainid=param[2],
       sprthash=param[1];
      return to_list
              ([0,
                [0,_cL_,field_codec_timestamp,sprthash],
                [0,_cK_,field_codec_timestamp,chainid],
                [0,_cJ_,field_codec_timestamp,broker],
                [0,_cI_,field_codec_timestamp,tmplhash]])}
    var
     codec_spirit_metadata=codec_record([0,fields$1,injector$1,projector$1]),
     fields$2=
      to_list
       ([0,
         [0,_cS_,field_codec_timestamp],
         [0,_cR_,field_codec_timestamp],
         [0,_cQ_,field_codec_timestamp],
         [0,_cP_,field_codec_timestamp],
         [0,_cO_,field_codec_amount],
         [0,_cN_,field_codec_template_fees],
         [0,_cM_,field_codec_timestamp]]);
    function injector$2(fields)
     {var
       genesisop=find_field(_cT_,field_codec_timestamp,fields),
       broker=find_field(_cU_,field_codec_timestamp,fields),
       requester=find_field(_cV_,field_codec_timestamp,fields),
       genparam=find_field(_cW_,field_codec_timestamp,fields),
       amount=find_field(_cX_,field_codec_amount,fields),
       template_fees=find_field(_cY_,field_codec_template_fees,fields),
       timestamp=find_field(_cZ_,field_codec_timestamp,fields);
      return [0,
              genesisop,
              broker,
              requester,
              genparam,
              amount,
              template_fees,
              timestamp]}
    function projector$2(param)
     {var
       timestamp=param[7],
       template_fees=param[6],
       amount=param[5],
       genparam=param[4],
       requester=param[3],
       broker=param[2],
       genesisop=param[1];
      return to_list
              ([0,
                [0,_c6_,field_codec_timestamp,genesisop],
                [0,_c5_,field_codec_timestamp,broker],
                [0,_c4_,field_codec_timestamp,requester],
                [0,_c3_,field_codec_timestamp,genparam],
                [0,_c2_,field_codec_amount,amount],
                [0,_c1_,field_codec_template_fees,template_fees],
                [0,_c0_,field_codec_timestamp,timestamp]])}
    var
     codec_genesis_metadata=codec_record([0,fields$2,injector$2,projector$2]),
     field_codec_delegation=codec_option(field_codec_timestamp),
     fields$3=
      to_list
       ([0,
         [0,_c$_,field_codec_timestamp],
         [0,_c__,field_codec_timestamp],
         [0,_c9_,field_codec_amount],
         [0,_c8_,field_codec_timestamp],
         [0,_c7_,field_codec_delegation]]);
    function injector$3(fields)
     {var
       rclabel=find_field(_da_,field_codec_timestamp,fields),
       address=find_field(_db_,field_codec_timestamp,fields),
       balance=find_field(_dc_,field_codec_amount,fields),
       storage=find_field(_dd_,field_codec_timestamp,fields),
       delegation=find_option_field(_de_,field_codec_delegation,fields);
      return [0,rclabel,address,balance,storage,delegation]}
    function projector$3(param)
     {var
       delegation=param[5],
       storage=param[4],
       balance=param[3],
       address=param[2],
       rclabel=param[1];
      return to_list
              ([0,
                [0,_dj_,field_codec_timestamp,rclabel],
                [0,_di_,field_codec_timestamp,address],
                [0,_dh_,field_codec_amount,balance],
                [0,_dg_,field_codec_timestamp,storage],
                [0,_df_,field_codec_delegation,delegation]])}
    var
     codec_avatar_state=codec_record([0,fields$3,injector$3,projector$3]),
     fields$4=
      to_list
       ([0,
         [0,_dq_,field_codec_timestamp],
         [0,_dp_,field_codec_timestamp],
         [0,_do_,field_codec_amount],
         [0,_dn_,field_codec_timestamp],
         [0,_dm_,field_codec_timestamp],
         [0,_dl_,field_codec_timestamp],
         [0,_dk_,field_codec_optxnid]]);
    function injector$4(fields)
     {var
       source=find_field(_dr_,field_codec_timestamp,fields),
       sender=find_field(_ds_,field_codec_timestamp,fields),
       amount=find_field(_dt_,field_codec_amount,fields),
       argument=find_field(_du_,field_codec_timestamp,fields),
       timestamp=find_field(_dv_,field_codec_timestamp,fields),
       chainop=find_field(_dw_,field_codec_timestamp,fields),
       optxnid=find_field(_dx_,field_codec_optxnid,fields);
      return [0,source,sender,amount,argument,timestamp,chainop,optxnid]}
    function projector$4(param)
     {var
       optxnid=param[7],
       chainop=param[6],
       timestamp=param[5],
       argument=param[4],
       amount=param[3],
       sender=param[2],
       source=param[1];
      return to_list
              ([0,
                [0,_dE_,field_codec_timestamp,source],
                [0,_dD_,field_codec_timestamp,sender],
                [0,_dC_,field_codec_amount,amount],
                [0,_dB_,field_codec_timestamp,argument],
                [0,_dA_,field_codec_timestamp,timestamp],
                [0,_dz_,field_codec_timestamp,chainop],
                [0,_dy_,field_codec_optxnid,optxnid]])}
    var
     codec_rootinv_metadata=codec_record([0,fields$4,injector$4,projector$4]),
     field_codec_olddel=codec_option(field_codec_timestamp),
     field_codec_newdel=codec_option(field_codec_timestamp),
     fields$5=
      to_list
       ([0,
         [0,_dI_,field_codec_timestamp],
         [0,_dH_,field_codec_timestamp],
         [0,_dG_,field_codec_olddel],
         [0,_dF_,field_codec_newdel]]);
    function injector$5(fields)
     {var
       kind=find_field(_dJ_,field_codec_timestamp,fields),
       subject=find_field(_dK_,field_codec_timestamp,fields),
       olddel=find_option_field(_dL_,field_codec_olddel,fields),
       newdel=find_option_field(_dM_,field_codec_newdel,fields);
      return [0,kind,subject,olddel,newdel]}
    function projector$5(param)
     {var newdel=param[4],olddel=param[3],subject=param[2],kind=param[1];
      return to_list
              ([0,
                [0,_dQ_,field_codec_timestamp,kind],
                [0,_dP_,field_codec_timestamp,subject],
                [0,_dO_,field_codec_olddel,olddel],
                [0,_dN_,field_codec_newdel,newdel]])}
    var
     codec=codec_record([0,fields$5,injector$5,projector$5]),
     field_codec_rclabel=codec_option(field_codec_timestamp),
     fields$6=
      to_list
       ([0,
         [0,_dW_,field_codec_timestamp],
         [0,_dV_,field_codec_rclabel],
         [0,_dU_,field_codec_timestamp],
         [0,_dT_,field_codec_amount],
         [0,_dS_,field_codec_timestamp],
         [0,_dR_,field_codec_timestamp]]);
    function injector$6(fields)
     {var
       kind=find_field(_dX_,field_codec_timestamp,fields),
       rclabel=find_option_field(_dY_,field_codec_rclabel,fields),
       address=find_field(_dZ_,field_codec_timestamp,fields),
       initbal=find_field(_d0_,field_codec_amount,fields),
       initstorage=find_field(_d1_,field_codec_timestamp,fields),
       program=find_field(_d2_,field_codec_timestamp,fields);
      return [0,kind,rclabel,address,initbal,initstorage,program]}
    function projector$6(param)
     {var
       program=param[6],
       initstorage=param[5],
       initbal=param[4],
       address=param[3],
       rclabel=param[2],
       kind=param[1];
      return to_list
              ([0,
                [0,_d8_,field_codec_timestamp,kind],
                [0,_d7_,field_codec_rclabel,rclabel],
                [0,_d6_,field_codec_timestamp,address],
                [0,_d5_,field_codec_amount,initbal],
                [0,_d4_,field_codec_timestamp,initstorage],
                [0,_d3_,field_codec_timestamp,program]])}
    var
     codec$0=codec_record([0,fields$6,injector$6,projector$6]),
     fields$7=
      to_list
       ([0,
         [0,_eb_,field_codec_timestamp],
         [0,_ea_,field_codec_timestamp],
         [0,_d$_,field_codec_timestamp],
         [0,_d__,field_codec_amount],
         [0,_d9_,field_codec_timestamp]]);
    function injector$7(fields)
     {var
       kind=find_field(_ec_,field_codec_timestamp,fields),
       sender=find_field(_ed_,field_codec_timestamp,fields),
       receiver=find_field(_ee_,field_codec_timestamp,fields),
       amount=find_field(_ef_,field_codec_amount,fields),
       argument=find_field(_eg_,field_codec_timestamp,fields);
      return [0,kind,sender,receiver,amount,argument]}
    function projector$7(param)
     {var
       argument=param[5],
       amount=param[4],
       receiver=param[3],
       sender=param[2],
       kind=param[1];
      return to_list
              ([0,
                [0,_el_,field_codec_timestamp,kind],
                [0,_ek_,field_codec_timestamp,sender],
                [0,_ej_,field_codec_timestamp,receiver],
                [0,_ei_,field_codec_amount,amount],
                [0,_eh_,field_codec_timestamp,argument]])}
    var
     codec$1=codec_record([0,fields$7,injector$7,projector$7]),
     fields$8=
      to_list
       ([0,
         [0,_eo_,field_codec_timestamp],
         [0,_en_,field_codec_timestamp],
         [0,_em_,field_codec_amount]]);
    function injector$8(fields)
     {var
       kind=find_field(_ep_,field_codec_timestamp,fields),
       sender=find_field(_eq_,field_codec_timestamp,fields),
       amount=find_field(_er_,field_codec_amount,fields);
      return [0,kind,sender,amount]}
    function projector$8(param)
     {var amount=param[3],sender=param[2],kind=param[1];
      return to_list
              ([0,
                [0,_eu_,field_codec_timestamp,kind],
                [0,_et_,field_codec_timestamp,sender],
                [0,_es_,field_codec_amount,amount]])}
    var codec$2=codec_record([0,fields$8,injector$8,projector$8]);
    function encoder(param)
     {switch(param[0])
       {case 0:
         var
          newdel=param[3],
          olddel=param[2],
          subject=param[1],
          wrapped=[0,bkind_expr_REDelegationUpdate,subject,olddel,newdel];
         return to_js(codec,wrapped);
        case 1:
         var
          program=param[5],
          initstorage=param[4],
          initbal=param[3],
          address=param[2],
          rclabel=param[1],
          wrapped$0=
           [0,
            bkind_expr_REContractOriginati,
            rclabel,
            address,
            initbal,
            initstorage,
            program];
         return to_js(codec$0,wrapped$0);
        case 2:
         var
          argument=param[4],
          amount=param[3],
          receiver=param[2],
          sender=param[1],
          wrapped$1=[0,bkind_expr_RESpending,sender,receiver,amount,argument];
         return to_js(codec$1,wrapped$1);
        default:
         var
          amount$0=param[2],
          sender$0=param[1],
          wrapped$2=[0,bkind_expr_REReceiving,sender$0,amount$0];
         return to_js(codec$2,wrapped$2)}}
    function decoder(param)
     {var _hm_=param[1];
      if(-138030163 <= _hm_)
       {if(708004631 <= _hm_)
         {var
           js=param[2],
           match=of_js(codec$1,js),
           argument=match[5],
           amount=match[4],
           receiver=match[3],
           sender=match[2];
          return [2,sender,receiver,amount,argument]}
        var
         js$0=param[2],
         match$0=of_js(codec$2,js$0),
         amount$0=match$0[3],
         sender$0=match$0[2];
        return [3,sender$0,amount$0]}
      if(-610509148 <= _hm_)
       {var
         js$1=param[2],
         match$1=of_js(codec,js$1),
         newdel=match$1[4],
         olddel=match$1[3],
         subject=match$1[2];
        return [0,subject,olddel,newdel]}
      var
       js$2=param[2],
       match$2=of_js(codec$0,js$2),
       program=match$2[6],
       initstorage=match$2[5],
       initbal=match$2[4],
       address=match$2[3],
       rclabel=match$2[2];
      return [1,rclabel,address,initbal,initstorage,program]}
    function brancher(js)
     {var kv=of_js(field_codec_timestamp,js.kind);
      if(caml_string_equal(kv,bkind_expr_REDelegationUpdate))
       return -610509148;
      if(caml_string_equal(kv,bkind_expr_REContractOriginati))
       return -758263510;
      if(caml_string_equal(kv,bkind_expr_RESpending))return 708004631;
      if(caml_string_equal(kv,bkind_expr_REReceiving))return -138030163;
      throw [0,Match_failure,_ev_]}
    var codec_rootinv_effect=codec_variant([0,encoder,decoder,brancher]);
    codec_diff(field_codec_timestamp);
    var
     field_codec_balance=codec_diff(field_codec_amount),
     field_codec_storage=codec_diff(field_codec_timestamp),
     fields$9=
      to_list
       ([0,
         [0,_eA_,field_codec_timestamp],
         [0,_ez_,field_codec_timestamp],
         [0,_ey_,field_codec_timestamp],
         [0,_ex_,field_codec_balance],
         [0,_ew_,field_codec_storage]]);
    function injector$9(fields)
     {var
       kind=find_field(_eB_,field_codec_timestamp,fields),
       subject=find_field(_eC_,field_codec_timestamp,fields),
       rclabel=find_field(_eD_,field_codec_timestamp,fields),
       balance=find_field(_eE_,field_codec_balance,fields),
       storage=find_field(_eF_,field_codec_storage,fields);
      return [0,kind,subject,rclabel,balance,storage]}
    function projector$9(param)
     {var
       storage=param[5],
       balance=param[4],
       rclabel=param[3],
       subject=param[2],
       kind=param[1];
      return to_list
              ([0,
                [0,_eK_,field_codec_timestamp,kind],
                [0,_eJ_,field_codec_timestamp,subject],
                [0,_eI_,field_codec_timestamp,rclabel],
                [0,_eH_,field_codec_balance,balance],
                [0,_eG_,field_codec_storage,storage]])}
    var
     codec$3=codec_record([0,fields$9,injector$9,projector$9]),
     field_codec_balance$0=codec_diff(field_codec_amount),
     field_codec_storage$0=codec_diff(field_codec_timestamp),
     fields$10=
      to_list
       ([0,
         [0,_eP_,field_codec_timestamp],
         [0,_eO_,field_codec_timestamp],
         [0,_eN_,field_codec_timestamp],
         [0,_eM_,field_codec_balance$0],
         [0,_eL_,field_codec_storage$0]]);
    function injector$10(fields)
     {var
       kind=find_field(_eQ_,field_codec_timestamp,fields),
       subject=find_field(_eR_,field_codec_timestamp,fields),
       rclabel=find_field(_eS_,field_codec_timestamp,fields),
       balance=find_field(_eT_,field_codec_balance$0,fields),
       storage=find_field(_eU_,field_codec_storage$0,fields);
      return [0,kind,subject,rclabel,balance,storage]}
    function projector$10(param)
     {var
       storage=param[5],
       balance=param[4],
       rclabel=param[3],
       subject=param[2],
       kind=param[1];
      return to_list
              ([0,
                [0,_eZ_,field_codec_timestamp,kind],
                [0,_eY_,field_codec_timestamp,subject],
                [0,_eX_,field_codec_timestamp,rclabel],
                [0,_eW_,field_codec_balance$0,balance],
                [0,_eV_,field_codec_storage$0,storage]])}
    var
     codec$4=codec_record([0,fields$10,injector$10,projector$10]),
     field_codec_balance$1=codec_diff(field_codec_amount),
     fields$11=
      to_list
       ([0,
         [0,_e2_,field_codec_timestamp],
         [0,_e1_,field_codec_timestamp],
         [0,_e0_,field_codec_balance$1]]);
    function injector$11(fields)
     {var
       kind=find_field(_e3_,field_codec_timestamp,fields),
       subject=find_field(_e4_,field_codec_timestamp,fields),
       balance=find_field(_e5_,field_codec_balance$1,fields);
      return [0,kind,subject,balance]}
    function projector$11(param)
     {var balance=param[3],subject=param[2],kind=param[1];
      return to_list
              ([0,
                [0,_e8_,field_codec_timestamp,kind],
                [0,_e7_,field_codec_timestamp,subject],
                [0,_e6_,field_codec_balance$1,balance]])}
    var
     codec$5=codec_record([0,fields$11,injector$11,projector$11]),
     field_codec_balance$2=codec_diff(field_codec_amount),
     field_codec_storage$1=codec_diff(field_codec_timestamp),
     fields$12=
      to_list
       ([0,
         [0,_fa_,field_codec_timestamp],
         [0,_e$_,field_codec_timestamp],
         [0,_e__,field_codec_balance$2],
         [0,_e9_,field_codec_storage$1]]);
    function injector$12(fields)
     {var
       kind=find_field(_fb_,field_codec_timestamp,fields),
       subject=find_field(_fc_,field_codec_timestamp,fields),
       balance=find_field(_fd_,field_codec_balance$2,fields),
       storage=find_field(_fe_,field_codec_storage$1,fields);
      return [0,kind,subject,balance,storage]}
    function projector$12(param)
     {var storage=param[4],balance=param[3],subject=param[2],kind=param[1];
      return to_list
              ([0,
                [0,_fi_,field_codec_timestamp,kind],
                [0,_fh_,field_codec_timestamp,subject],
                [0,_fg_,field_codec_balance$2,balance],
                [0,_ff_,field_codec_storage$1,storage]])}
    var codec$6=codec_record([0,fields$12,injector$12,projector$12]);
    function encoder$0(param)
     {switch(param[0])
       {case 0:
         var
          storage=param[4],
          balance=param[3],
          rclabel=param[2],
          subject=param[1],
          wrapped=
           [0,bkind_expr_RRAvatarUpdate,subject,rclabel,balance,storage];
         return to_js(codec$3,wrapped);
        case 1:
         var
          storage$0=param[4],
          balance$0=param[3],
          rclabel$0=param[2],
          subject$0=param[1],
          wrapped$0=
           [0,
            bkind_expr_RRAvatarOrigination,
            subject$0,
            rclabel$0,
            balance$0,
            storage$0];
         return to_js(codec$4,wrapped$0);
        case 2:
         var
          balance$1=param[2],
          subject$1=param[1],
          wrapped$1=[0,bkind_expr_RRContractAffected,subject$1,balance$1];
         return to_js(codec$5,wrapped$1);
        default:
         var
          storage$1=param[3],
          balance$2=param[2],
          subject$2=param[1],
          wrapped$2=
           [0,bkind_expr_RRContractOriginati,subject$2,balance$2,storage$1];
         return to_js(codec$6,wrapped$2)}}
    function decoder$0(param)
     {var _hl_=param[1];
      if(690898658 <= _hl_)
       {if(691868102 <= _hl_)
         {var
           js=param[2],
           match=of_js(codec$5,js),
           balance=match[3],
           subject=match[2];
          return [2,subject,balance]}
        var
         js$0=param[2],
         match$0=of_js(codec$3,js$0),
         storage=match$0[5],
         balance$0=match$0[4],
         rclabel=match$0[3],
         subject$0=match$0[2];
        return [0,subject$0,rclabel,balance$0,storage]}
      if(266658710 <= _hl_)
       {var
         js$1=param[2],
         match$1=of_js(codec$4,js$1),
         storage$0=match$1[5],
         balance$1=match$1[4],
         rclabel$0=match$1[3],
         subject$1=match$1[2];
        return [1,subject$1,rclabel$0,balance$1,storage$0]}
      var
       js$2=param[2],
       match$2=of_js(codec$6,js$2),
       storage$1=match$2[4],
       balance$2=match$2[3],
       subject$2=match$2[2];
      return [3,subject$2,balance$2,storage$1]}
    function brancher$0(js)
     {var kv=of_js(field_codec_timestamp,js.kind);
      if(caml_string_equal(kv,bkind_expr_RRAvatarUpdate))return 690898658;
      if(caml_string_equal(kv,bkind_expr_RRAvatarOrigination))
       return 266658710;
      if(caml_string_equal(kv,bkind_expr_RRContractAffected))return 691868102;
      if(caml_string_equal(kv,bkind_expr_RRContractOriginati))return 99233085;
      throw [0,Match_failure,_fj_]}
    var
     codec_rootinv_result=codec_variant([0,encoder$0,decoder$0,brancher$0]),
     field_codec_effects=codec_list(codec_rootinv_effect),
     field_codec_results=codec_list(codec_rootinv_result),
     fields$13=
      to_list
       ([0,
         [0,_fn_,field_codec_timestamp],
         [0,_fm_,codec_rootinv_metadata],
         [0,_fl_,field_codec_effects],
         [0,_fk_,field_codec_results]]);
    function injector$13(fields)
     {var
       rivhash=find_field(_fo_,field_codec_timestamp,fields),
       metadata=find_field(_fp_,codec_rootinv_metadata,fields),
       effects=find_field(_fq_,field_codec_effects,fields),
       results=find_field(_fr_,field_codec_results,fields);
      return [0,rivhash,metadata,effects,results]}
    function projector$13(param)
     {var
       results=param[4],
       effects=param[3],
       metadata=param[2],
       rivhash=param[1];
      return to_list
              ([0,
                [0,_fv_,field_codec_timestamp,rivhash],
                [0,_fu_,codec_rootinv_metadata,metadata],
                [0,_ft_,field_codec_effects,effects],
                [0,_fs_,field_codec_results,results]])}
    var
     codec_rootinv=codec_record([0,fields$13,injector$13,projector$13]),
     fields$14=
      to_list
       ([0,
         [0,_fz_,field_codec_timestamp],
         [0,_fy_,field_codec_timestamp],
         [0,_fx_,field_codec_fees],
         [0,_fw_,field_codec_timestamp]]);
    function injector$14(fields)
     {var
       ophash=find_field(_fA_,field_codec_timestamp,fields),
       source=find_field(_fB_,field_codec_timestamp,fields),
       fees=find_field(_fC_,field_codec_fees,fields),
       timestamp=find_field(_fD_,field_codec_timestamp,fields);
      return [0,ophash,source,fees,timestamp]}
    function projector$14(param)
     {var timestamp=param[4],fees=param[3],source=param[2],ophash=param[1];
      return to_list
              ([0,
                [0,_fH_,field_codec_timestamp,ophash],
                [0,_fG_,field_codec_timestamp,source],
                [0,_fF_,field_codec_fees,fees],
                [0,_fE_,field_codec_timestamp,timestamp]])}
    var
     codec_chainop_metadata=
      codec_record([0,fields$14,injector$14,projector$14]),
     field_codec_avatars=codec_dictionary(codec_avatar_state),
     field_codec_affected=codec_dictionary(field_codec_amount),
     field_codec_rootinvs=codec_dictionary(codec_rootinv),
     field_codec_chainops=codec_dictionary(codec_chainop_metadata);
    to_list
     ([0,
       [0,_fN_,codec_spirit_metadata],
       [0,_fM_,codec_genesis_metadata],
       [0,_fL_,field_codec_avatars],
       [0,_fK_,field_codec_affected],
       [0,_fJ_,field_codec_rootinvs],
       [0,_fI_,field_codec_chainops]]);
    var
     spirit_metadata=[0,sprthash,chainid,broker,tmplhash],
     template_fees=[254,0.5,1.5],
     genesis_metadata=
      [0,
       genesisop,
       broker,
       genesis_requester,
       genparam,
       103.2,
       template_fees,
       genesis_timestamp],
     genesisop_metadata=
      [0,genesisop,genesis_requester,[254,0.952,2.334],genesis_timestamp],
     avatar_major=[0,major,_fP_,103.2,_fO_,0],
     flatdata=
      [0,
       spirit_metadata,
       genesis_metadata,
       [0,[0,[0,major,avatar_major],0]],
       [0,0],
       [0,0],
       [0,[0,[0,genesisop,genesisop_metadata],0]]];
    function debug(param)
     {var fmt=param[1],buf=pp_make_buffer(0),ppf=formatter_of_buffer(buf);
      function k(acc)
       {output_acc(ppf,acc);
        pp_flush_queue(ppf,0);
        var msg=contents(buf);
        buf[2] = 0;
        buf[1] = buf[4];
        buf[3] = caml_ml_bytes_length(buf[1]);
        global.console.log(caml_jsstring_of_string(msg));
        return 0}
      return make_printf(k,0,fmt)}
    caml_call1(debug(_fR_),_fQ_);
    try
     {var
       url=caml_string_of_jsstring(window.location.href),
       _fW_=[0,last(split_on_char(47,url))],
       _fX_=_fW_}
    catch(_hk_){var _fX_=0}
    var sprthashref=[0,_fX_];
    function mock_flatdata(param)
     {var _hi_=sprthashref[1];
      if(_hi_)var v=_hi_[1],_hj_=v;else var _hj_=invalid_arg(_d_);
      if(caml_string_equal(_hj_,sprthash))return flatdata;
      throw Not_found}
    var _fY_=[0,0,0,0];
    function _fZ_
     (self,
      apimode,
      inflevel,
      bil_token_js,
      mock_selected_js,
      mock_select_js,
      mock_flatdata_js,
      spiritInfo,
      genesisInfo,
      avatars,
      avatarInfo,
      avatarAddress,
      rootinvs,
      rootinvInfo,
      rootinvEffects,
      rootinvResults,
      chainopInfo)
     {if(! _fY_[1])
       {if(0 === public_methods)
         var _gE_=new_table([0]);
        else
         {var
           tags=map$1(public_method_label,public_methods),
           table=new_table(tags),
           _gA_=public_methods.length - 1 - 1 | 0,
           _gz_=0;
          if(! (_gA_ < 0))
           {var i=_gz_;
            for(;;)
             {var met=public_methods[1 + i],lab=(i * 2 | 0) + 2 | 0;
              table[3] = caml_call3(Meths[4],met,lab,table[3]);
              table[4] = caml_call3(Labs[4],lab,1,table[4]);
              var _gB_=i + 1 | 0;
              if(_gA_ !== i){var i=_gB_;continue}
              break}}
          var _gE_=table}
        var
         _gF_=new_variable(_gE_,_f0_),
         _gC_=map$1(function(_hh_){return get_method_label(_gE_,_hh_)},names),
         _gG_=_gC_[1],
         _gH_=_gC_[2],
         _gI_=_gC_[3],
         _gJ_=_gC_[4],
         _gK_=_gC_[5],
         _gL_=_gC_[6],
         _gM_=_gC_[7],
         _gN_=_gC_[8],
         _gO_=_gC_[9],
         _gP_=_gC_[10],
         _gQ_=_gC_[11],
         _gR_=_gC_[12],
         _gS_=_gC_[13],
         _gT_=_gC_[14],
         _gU_=_gC_[15],
         _gV_=_gC_[16],
         _gW_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[2],env[1])},
         _gX_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[3],env[1])},
         _gY_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[4],env[1])},
         _gZ_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[5],env[1])},
         _g0_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[6],env[1])},
         _g1_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[7],env[1])},
         _g2_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[8],env[1])},
         _g3_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[9],env[1])},
         _g4_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[10],env[1])},
         _g5_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[11],env[1])},
         _g6_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[12],env[1])},
         _g7_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[13],env[1])},
         _g8_=
          function(self_1)
           {var env=self_1[1 + _gF_];return caml_call1(env[14],env[1])},
         _g9_=function(self_1){var env=self_1[1 + _gF_];return env[15]},
         _g__=function(self_1){var env=self_1[1 + _gF_];return env[16]},
         methods=
          [0,
           _gR_,
           function(self_1){var env=self_1[1 + _gF_];return env[17]},
           _gL_,
           _g__,
           _gV_,
           _g9_,
           _gS_,
           _g8_,
           _gT_,
           _g7_,
           _gU_,
           _g6_,
           _gG_,
           _g5_,
           _gM_,
           _g4_,
           _gO_,
           _g3_,
           _gP_,
           _g2_,
           _gQ_,
           _g1_,
           _gH_,
           _g0_,
           _gJ_,
           _gZ_,
           _gK_,
           _gY_,
           _gI_,
           _gX_,
           _gN_,
           _gW_],
         len=methods.length - 1,
         i$0=[0,0];
        for(;;)
         {if(i$0[1] < len)
           {var
             _gD_=i$0[1],
             label=caml_check_bound(methods,_gD_)[1 + _gD_],
             next=
              function(param)
               {i$0[1]++;
                var _hg_=i$0[1];
                return caml_check_bound(methods,_hg_)[1 + _hg_]},
             clo=next(0);
            if(typeof clo === "number")
             switch(clo)
              {case 0:
                var
                 x=next(0),
                 clo$0=function(x){return function(obj){return x}}(x);
                break;
               case 1:
                var
                 n=next(0),
                 clo$0=function(n){return function(obj){return obj[1 + n]}}(n);
                break;
               case 2:
                var
                 e=next(0),
                 n$0=next(0),
                 clo$0=
                  function(e,n)
                    {return function(obj){return obj[1 + e][1 + n]}}
                   (e,n$0);
                break;
               case 3:
                var
                 n$1=next(0),
                 clo$0=
                  function(n)
                    {return function(obj){return caml_call1(obj[1][1 + n],obj)}}
                   (n$1);
                break;
               case 4:
                var
                 n$2=next(0),
                 clo$0=
                  function(n){return function(obj,x){obj[1 + n] = x;return 0}}
                   (n$2);
                break;
               case 5:
                var
                 f=next(0),
                 x$0=next(0),
                 clo$0=
                  function(f,x){return function(obj){return caml_call1(f,x)}}
                   (f,x$0);
                break;
               case 6:
                var
                 f$0=next(0),
                 n$3=next(0),
                 clo$0=
                  function(f,n)
                    {return function(obj){return caml_call1(f,obj[1 + n])}}
                   (f$0,n$3);
                break;
               case 7:
                var
                 f$1=next(0),
                 e$0=next(0),
                 n$4=next(0),
                 clo$0=
                  function(f,e,n)
                    {return function(obj)
                      {return caml_call1(f,obj[1 + e][1 + n])}}
                   (f$1,e$0,n$4);
                break;
               case 8:
                var
                 f$2=next(0),
                 n$5=next(0),
                 clo$0=
                  function(f,n)
                    {return function(obj)
                      {return caml_call1(f,caml_call1(obj[1][1 + n],obj))}}
                   (f$2,n$5);
                break;
               case 9:
                var
                 f$3=next(0),
                 x$1=next(0),
                 y=next(0),
                 clo$0=
                  function(f,x,y)
                    {return function(obj){return caml_call2(f,x,y)}}
                   (f$3,x$1,y);
                break;
               case 10:
                var
                 f$4=next(0),
                 x$2=next(0),
                 n$6=next(0),
                 clo$0=
                  function(f,x,n)
                    {return function(obj){return caml_call2(f,x,obj[1 + n])}}
                   (f$4,x$2,n$6);
                break;
               case 11:
                var
                 f$5=next(0),
                 x$3=next(0),
                 e$1=next(0),
                 n$7=next(0),
                 clo$0=
                  function(f,x,e,n)
                    {return function(obj)
                      {return caml_call2(f,x,obj[1 + e][1 + n])}}
                   (f$5,x$3,e$1,n$7);
                break;
               case 12:
                var
                 f$6=next(0),
                 x$4=next(0),
                 n$8=next(0),
                 clo$0=
                  function(f,x,n)
                    {return function(obj)
                      {return caml_call2(f,x,caml_call1(obj[1][1 + n],obj))}}
                   (f$6,x$4,n$8);
                break;
               case 13:
                var
                 f$7=next(0),
                 n$9=next(0),
                 x$5=next(0),
                 clo$0=
                  function(f,n,x)
                    {return function(obj){return caml_call2(f,obj[1 + n],x)}}
                   (f$7,n$9,x$5);
                break;
               case 14:
                var
                 f$8=next(0),
                 e$2=next(0),
                 n$10=next(0),
                 x$6=next(0),
                 clo$0=
                  function(f,e,n,x)
                    {return function(obj)
                      {return caml_call2(f,obj[1 + e][1 + n],x)}}
                   (f$8,e$2,n$10,x$6);
                break;
               case 15:
                var
                 f$9=next(0),
                 n$11=next(0),
                 x$7=next(0),
                 clo$0=
                  function(f,n,x)
                    {return function(obj)
                      {return caml_call2(f,caml_call1(obj[1][1 + n],obj),x)}}
                   (f$9,n$11,x$7);
                break;
               case 16:
                var
                 n$12=next(0),
                 x$8=next(0),
                 clo$0=
                  function(n,x)
                    {return function(obj)
                      {return caml_call2(obj[1][1 + n],obj,x)}}
                   (n$12,x$8);
                break;
               case 17:
                var
                 n$13=next(0),
                 m=next(0),
                 clo$0=
                  function(n,m)
                    {return function(obj)
                      {return caml_call2(obj[1][1 + n],obj,obj[1 + m])}}
                   (n$13,m);
                break;
               case 18:
                var
                 n$14=next(0),
                 e$3=next(0),
                 m$0=next(0),
                 clo$0=
                  function(n,e,m)
                    {return function(obj)
                      {return caml_call2(obj[1][1 + n],obj,obj[1 + e][1 + m])}}
                   (n$14,e$3,m$0);
                break;
               case 19:
                var
                 n$15=next(0),
                 m$1=next(0),
                 clo$0=
                  function(n,m)
                    {return function(obj)
                      {var _he_=caml_call1(obj[1][1 + m],obj);
                       return caml_call2(obj[1][1 + n],obj,_he_)}}
                   (n$15,m$1);
                break;
               case 20:
                var
                 m$2=next(0),
                 x$9=next(0),
                 c=new_cache(_gE_),
                 clo$0=
                  function(m,x,c)
                    {return function(obj)
                      {return caml_call2(caml_get_public_method(x,m,0),x,c)}}
                   (m$2,x$9,c);
                break;
               case 21:
                var
                 m$3=next(0),
                 n$16=next(0),
                 c$0=new_cache(_gE_),
                 clo$0=
                  function(m,n,c)
                    {return function(obj)
                      {var _hd_=obj[1 + n];
                       return caml_call2(caml_get_public_method(_hd_,m,0),_hd_,c)}}
                   (m$3,n$16,c$0);
                break;
               case 22:
                var
                 m$4=next(0),
                 e$4=next(0),
                 n$17=next(0),
                 c$1=new_cache(_gE_),
                 clo$0=
                  function(m,e,n,c)
                    {return function(obj)
                      {var _hc_=obj[1 + e][1 + n];
                       return caml_call2(caml_get_public_method(_hc_,m,0),_hc_,c)}}
                   (m$4,e$4,n$17,c$1);
                break;
               default:
                var
                 m$5=next(0),
                 n$18=next(0),
                 c$2=new_cache(_gE_),
                 clo$0=
                  function(m,n,c)
                    {return function(obj)
                      {var _hf_=caml_call1(obj[1][1 + n],obj);
                       return caml_call2(caml_get_public_method(_hf_,m,0),_hf_,c)}}
                   (m$5,n$18,c$2)}
            else
             var clo$0=clo;
            method_count[1]++;
            if(caml_call2(Labs[27],label,_gE_[4]))
             {resize$0(_gE_,label + 1 | 0);
              caml_check_bound(_gE_[2],label)[1 + label] = clo$0}
            else
             _gE_[6] = [0,[0,label,clo$0],_gE_[6]];
            i$0[1]++;
            continue}
          var
           _g$_=
            function(_hb_)
             {var obj=caml_obj_block(248,_gE_[1]);
              obj[1] = _gE_[2];
              var _ha_=caml_set_oo_id(obj);
              _ha_[1 + _gF_] = _hb_;
              return _ha_};
          inst_var_count[1] = (inst_var_count[1] + _gE_[1] | 0) - 1 | 0;
          var l1=_gE_[8],l2=0;
          for(;;)
           {if(l1)
             {var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
            _gE_[8] = l2;
            resize$0
             (_gE_,
              3 + ((caml_check_bound(_gE_[2],1)[2] * 16 | 0) / 32 | 0) | 0);
            _fY_[1] = _g$_;
            break}
          break}}
      return caml_call1
              (_fY_[1],
               [0,
                self,
                chainopInfo,
                rootinvResults,
                rootinvEffects,
                rootinvInfo,
                rootinvs,
                avatarAddress,
                avatarInfo,
                avatars,
                genesisInfo,
                spiritInfo,
                mock_flatdata_js,
                mock_select_js,
                mock_selected_js,
                bil_token_js,
                inflevel,
                apimode])}
    function _f1_(param,ophash)
     {var _gy_=caml_string_of_jsstring(ophash);
      return to_js(codec_chainop_metadata,lookup(mock_flatdata(0)[6],_gy_))}
    function _f2_(param,rivhash)
     {var
       _gw_=caml_string_of_jsstring(rivhash),
       _gx_=lookup(mock_flatdata(0)[5],_gw_)[4];
      return to_js(codec_list(codec_rootinv_result),_gx_)}
    function _f3_(param,rivhash)
     {var
       _gu_=caml_string_of_jsstring(rivhash),
       _gv_=lookup(mock_flatdata(0)[5],_gu_)[3];
      return to_js(codec_list(codec_rootinv_effect),_gv_)}
    function _f4_(param,rivhash)
     {var _gt_=caml_string_of_jsstring(rivhash);
      return to_js(codec_rootinv_metadata,lookup(mock_flatdata(0)[5],_gt_)[2])}
    function _f5_(param)
     {var
       _gq_=datafy(mock_flatdata(0)[5]),
       _gr_=map$0(function(_gs_){return _gs_[1]},_gq_);
      return to_js(codec_list(field_codec_timestamp),_gr_)}
    function _f6_(param,avatar)
     {var
       _gp_=caml_string_of_jsstring(avatar),
       avatar$0=lookup(mock_flatdata(0)[3],_gp_);
      return caml_jsstring_of_string(avatar$0[2])}
    function _f7_(param,avatar)
     {var _go_=caml_string_of_jsstring(avatar);
      return to_js(codec_avatar_state,lookup(mock_flatdata(0)[3],_go_))}
    function _f8_(param)
     {var
       _gl_=datafy(mock_flatdata(0)[3]),
       _gm_=map$0(function(_gn_){return _gn_[1]},_gl_);
      return to_js(codec_list(field_codec_timestamp),_gm_)}
    function _f9_(param)
     {return to_js(codec_genesis_metadata,mock_flatdata(0)[2])}
    function _f__(param)
     {return to_js(codec_spirit_metadata,mock_flatdata(0)[1])}
    function _f$_(param){return mock_flatdata}
    function _ga_(param,sprthash)
     {sprthashref[1] = [0,caml_string_of_jsstring(sprthash)];return sprthash}
    function _gb_(param)
     {var x$0=map(caml_jsstring_of_string,sprthashref[1]);
      if(x$0){var x=x$0[1];return x}
      return null$0}
    var
     passin=caml_js_eval_string(_fS_),
     passin$0=map(caml_string_of_jsstring,to_option(passin)),
     token=value(passin$0,_fT_);
    caml_call2(debug(_fV_),_fU_,token);
    var
     _gc_=caml_jsstring_of_string(token),
     _gd_="proto0.inf1",
     _ge_="sync",
     apis=
      function
        (t14,
         t15,
         t16,
         t17,
         t18,
         t19,
         t20,
         t21,
         t22,
         t23,
         t24,
         t25,
         t26,
         t27,
         t28,
         t29,
         param)
        {return {"apimode":t14,
                 "inflevel":t15,
                 "_bil_token":t16,
                 "_mock_selected":caml_js_wrap_meth_callback(t17),
                 "_mock_select":caml_js_wrap_meth_callback(t18),
                 "_mock_flatdata":caml_js_wrap_meth_callback(t19),
                 "spiritInfo":caml_js_wrap_meth_callback(t20),
                 "genesisInfo":caml_js_wrap_meth_callback(t21),
                 "avatars":caml_js_wrap_meth_callback(t22),
                 "avatarInfo":caml_js_wrap_meth_callback(t23),
                 "avatarAddress":caml_js_wrap_meth_callback(t24),
                 "rootinvs":caml_js_wrap_meth_callback(t25),
                 "rootinvInfo":caml_js_wrap_meth_callback(t26),
                 "rootinvEffects":caml_js_wrap_meth_callback(t27),
                 "rootinvResults":caml_js_wrap_meth_callback(t28),
                 "chainopInfo":caml_js_wrap_meth_callback(t29)}}
       (_ge_,
        _gd_,
        _gc_,
        _gb_,
        _ga_,
        _f$_,
        _f__,
        _f9_,
        _f8_,
        _f7_,
        _f6_,
        _f5_,
        _f4_,
        _f3_,
        _f2_,
        _f1_,
        _fZ_);
    export$0(entrypoint,apis);
    global.TSCABookappInterface = apis;
    caml_call2(debug(_gg_),_gf_,entrypoint);
    do_at_exit(0);
    return}
  (function(){return this}()));

//# sourceMappingURL=bil-jslib.map
